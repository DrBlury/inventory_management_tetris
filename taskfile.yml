---
version: 3

dotenv: ['.env']

# To run this taskfile, install taskfile using
# go install github.com/go-task/task/v3/cmd/task@latest

# To run the taskfile, use the following command
# task <task-name>

tasks:
  quickstart:
    desc: 'Quickstart the project for running'
    cmds:
      - task gen-env-file
      - echo "Please fill the .env file with the required values"
      - echo "Run 'task start' to start the application"
    silent: true

  quickstart-dev:
    desc: 'Quickstart the project for development'
    cmds:
      - echo "Installing local tools for development..."
      - task install-tools
      - task gen-env-file
      - echo "Please fill the .env file with the required values"
    silent: true

  gen-env-file:
    desc: 'Generate the .env file'
    cmds:
      - echo "Generating the .env file"
      - cp .env.example .env
    silent: true

  start:
    desc: 'Run the docker-compose file'
    cmds:
      - echo "Starting the application with docker."
      - docker-compose up --build
    silent: true

  lint:
    desc: 'Lint the project using golangci-lint'
    cmds:
      - echo "linting the project"
      - docker run --rm -v "./src:/src" golangci/golangci-lint:latest /bin/sh -c "cd /src golangci-lint run"
    silent: true

  build-push:
    desc: 'Build and push the docker image to the docker repo'
    cmds:
      - echo "Building the image and pushing to repo"
      - docker login ${DOCKER_URL} -u ${DOCKER_USER} -p ${DOCKER_PASS}
      - docker build . -t ${DOCKER_URL}/${IMAGE}:${TAG}
      - docker push ${DOCKER_URL}/${IMAGE}:${TAG}
      - docker logout
    silent: true

  gen-sql:
    desc: 'Generate the sql files to create the database schema'
    cmds:
      - echo "Generating the sql"
      - docker run --rm -v ./database:/app gitea.linuxcode.net/linuxcode/dbml-cli dbml2sql ./schema.dbml -o ./schema.sql
      - task format
    silent: true

  gen-sqlc:
    desc: 'Generate the sqlc files to create the database repo'
    cmds:
      - echo "Generating the sqlc"
      - docker run --rm -v ./database:/src -w /src sqlc/sqlc generate
      - rm -rf ./src/pkg/repo/generated
      - mv ./database/generated ./src/pkg/repo
    silent: true

  lint-api:
    desc: 'Lint the api-spec using redocly'
    cmds:
      - echo "Linting the api-spec"
      - docker run --rm -v ./api-spec/:/spec redocly/cli lint --generate-ignore-file api.yml
    silent: true

  bundle-api:
    desc: 'Bundle the api-spec using redocly'
    cmds:
      - echo "Bundling the api-spec using redocly/redoc"
      - docker run --rm -v ./api-spec/:/spec redocly/cli bundle api.yml -o bundle.yml
    silent: true

  gen-api-chi:
    desc: 'Generate the api wrapper interfaces for chi server using oapi-codegen'
    cmds:
      - echo "Generate the api wrapper interfaces for chi server using oapi-codegen"
      - oapi-codegen --config ./api-spec/server.cfg.yml ./api-spec/bundle.yml > ./src/pkg/server/generated/api.gen.go
    silent: true

  gen-api-types:
    desc: 'Generate the types for the api using oapi-codegen'
    cmds:
      - echo "Generating the types for the api using oapi-codegen"
      - oapi-codegen -generate types -package server ./api-spec/bundle.yml > ./src/pkg/server/generated/types.gen.go
    silent: true

  gen-api:
    desc: 'Generate the api for the server using oapi-codegen'
    cmds:
      - task bundle-api
      - task generate-api-types
      - task generate-api-chi
    silent: true

  install-tools:
    desc: 'Install the local tools globally'
    cmds:
      - echo "Installing go based tools"
      - go install github.com/deepmap/oapi-codegen/v2/cmd/oapi-codegen@latest

      - echo "Installing Prettier & plugins into the project folder"
      - echo "Prettier recommends against installing plugins globally"
      - npm i -g prettier
      - npm i -D prettier-plugin-sql
      - npm i -D prettier-plugin-go-template
    silent: true

  format:
    desc: Format all project files
    cmds:
      - echo "Formatting all files"
      - task format-md
      - task format-sql
      - task format-yml
      - task format-json
      # - task format-go-templ # Removed as no go.tmpl files are present
    silent: true

  format-go-templ:
    desc: Format all go template files
    cmds:
      - prettier --write "**/*.tmpl"
    silent: true

  format-md:
    desc: Format all markdown files
    cmds:
      - prettier --write "**/*.md"
    silent: true

  format-sql:
    desc: Format all sql files
    cmds:
      - prettier --write "**/*.sql"
    silent: true

  format-yml:
    desc: Format all yml files
    cmds:
      - prettier --write "**/*.{yml,yaml}"
    silent: true

  format-json:
    desc: Format all json files
    cmds:
      - prettier --write "**/*.json"
    silent: true

  format-in-docker:
    desc: Format using dockered prettier with plugins
    cmds:
      # Build the prettier with plugins image
      - docker build -t format-all -f ./build/dockerfiles/format.dockerfile .
      # Run with mounted volume
      - docker run --rm -v $(pwd):/app/project format-all
    silent: true
