// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all inventories
	// (GET /api/inventories)
	GetAllInventories(w http.ResponseWriter, r *http.Request)
	// Add new inventory
	// (POST /api/inventories)
	AddInventory(w http.ResponseWriter, r *http.Request)
	// Delete an inventory
	// (DELETE /api/inventories/{inventoryId})
	DeleteInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64)
	// Get inventory by ID
	// (GET /api/inventories/{inventoryId})
	GetInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64)
	// Update an inventory
	// (PUT /api/inventories/{inventoryId})
	UpdateInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64)
	// Add item to inventory (with optional position)
	// (POST /api/inventories/{inventoryId}/add)
	AddItemInInventory(w http.ResponseWriter, r *http.Request, inventoryId int64)
	// Move item in Inventory
	// (POST /api/inventories/{inventoryId}/move)
	MoveItemInInventory(w http.ResponseWriter, r *http.Request, inventoryId int64)
	// Get all items
	// (GET /api/items)
	GetAllItems(w http.ResponseWriter, r *http.Request)
	// Add a new item
	// (POST /api/items)
	AddItem(w http.ResponseWriter, r *http.Request)
	// Delete an item
	// (DELETE /api/items/{itemId})
	DeleteItemById(w http.ResponseWriter, r *http.Request, itemId int64)
	// Get item
	// (GET /api/items/{itemId})
	GetItemById(w http.ResponseWriter, r *http.Request, itemId int64)
	// Update an item
	// (PUT /api/items/{itemId})
	UpdateItemById(w http.ResponseWriter, r *http.Request, itemId int64)
	// Get all users
	// (GET /api/users)
	GetAllUsers(w http.ResponseWriter, r *http.Request)
	// Add a new user
	// (POST /api/users)
	AddUser(w http.ResponseWriter, r *http.Request)
	// Delete a user
	// (DELETE /api/users/{userId})
	DeleteUserById(w http.ResponseWriter, r *http.Request, userId int64)
	// Get a user
	// (GET /api/users/{userId})
	GetUserById(w http.ResponseWriter, r *http.Request, userId int64)
	// Update a user
	// (PUT /api/users/{userId})
	UpdateUserById(w http.ResponseWriter, r *http.Request, userId int64)
	// Get metrics for the service
	// (GET /info/metrics)
	GetMetrics(w http.ResponseWriter, r *http.Request)
	// Get describing html of openapi spec
	// (GET /info/openapi.html)
	GetOpenAPIHTML(w http.ResponseWriter, r *http.Request, params GetOpenAPIHTMLParams)
	// Get openapi spec as json
	// (GET /info/openapi.json)
	GetOpenAPIJSON(w http.ResponseWriter, r *http.Request)
	// Get status of the service
	// (GET /info/status)
	GetStatus(w http.ResponseWriter, r *http.Request)
	// Get version info of the service
	// (GET /info/version)
	GetVersion(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all inventories
// (GET /api/inventories)
func (_ Unimplemented) GetAllInventories(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add new inventory
// (POST /api/inventories)
func (_ Unimplemented) AddInventory(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an inventory
// (DELETE /api/inventories/{inventoryId})
func (_ Unimplemented) DeleteInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get inventory by ID
// (GET /api/inventories/{inventoryId})
func (_ Unimplemented) GetInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an inventory
// (PUT /api/inventories/{inventoryId})
func (_ Unimplemented) UpdateInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add item to inventory (with optional position)
// (POST /api/inventories/{inventoryId}/add)
func (_ Unimplemented) AddItemInInventory(w http.ResponseWriter, r *http.Request, inventoryId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Move item in Inventory
// (POST /api/inventories/{inventoryId}/move)
func (_ Unimplemented) MoveItemInInventory(w http.ResponseWriter, r *http.Request, inventoryId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all items
// (GET /api/items)
func (_ Unimplemented) GetAllItems(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add a new item
// (POST /api/items)
func (_ Unimplemented) AddItem(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an item
// (DELETE /api/items/{itemId})
func (_ Unimplemented) DeleteItemById(w http.ResponseWriter, r *http.Request, itemId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get item
// (GET /api/items/{itemId})
func (_ Unimplemented) GetItemById(w http.ResponseWriter, r *http.Request, itemId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an item
// (PUT /api/items/{itemId})
func (_ Unimplemented) UpdateItemById(w http.ResponseWriter, r *http.Request, itemId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all users
// (GET /api/users)
func (_ Unimplemented) GetAllUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add a new user
// (POST /api/users)
func (_ Unimplemented) AddUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a user
// (DELETE /api/users/{userId})
func (_ Unimplemented) DeleteUserById(w http.ResponseWriter, r *http.Request, userId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a user
// (GET /api/users/{userId})
func (_ Unimplemented) GetUserById(w http.ResponseWriter, r *http.Request, userId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a user
// (PUT /api/users/{userId})
func (_ Unimplemented) UpdateUserById(w http.ResponseWriter, r *http.Request, userId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get metrics for the service
// (GET /info/metrics)
func (_ Unimplemented) GetMetrics(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get describing html of openapi spec
// (GET /info/openapi.html)
func (_ Unimplemented) GetOpenAPIHTML(w http.ResponseWriter, r *http.Request, params GetOpenAPIHTMLParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get openapi spec as json
// (GET /info/openapi.json)
func (_ Unimplemented) GetOpenAPIJSON(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get status of the service
// (GET /info/status)
func (_ Unimplemented) GetStatus(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get version info of the service
// (GET /info/version)
func (_ Unimplemented) GetVersion(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllInventories operation middleware
func (siw *ServerInterfaceWrapper) GetAllInventories(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllInventories(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddInventory operation middleware
func (siw *ServerInterfaceWrapper) AddInventory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddInventory(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteInventoryById operation middleware
func (siw *ServerInterfaceWrapper) DeleteInventoryById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "inventoryId" -------------
	var inventoryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "inventoryId", chi.URLParam(r, "inventoryId"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteInventoryById(w, r, inventoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetInventoryById operation middleware
func (siw *ServerInterfaceWrapper) GetInventoryById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "inventoryId" -------------
	var inventoryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "inventoryId", chi.URLParam(r, "inventoryId"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInventoryById(w, r, inventoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateInventoryById operation middleware
func (siw *ServerInterfaceWrapper) UpdateInventoryById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "inventoryId" -------------
	var inventoryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "inventoryId", chi.URLParam(r, "inventoryId"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateInventoryById(w, r, inventoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddItemInInventory operation middleware
func (siw *ServerInterfaceWrapper) AddItemInInventory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "inventoryId" -------------
	var inventoryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "inventoryId", chi.URLParam(r, "inventoryId"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddItemInInventory(w, r, inventoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// MoveItemInInventory operation middleware
func (siw *ServerInterfaceWrapper) MoveItemInInventory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "inventoryId" -------------
	var inventoryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "inventoryId", chi.URLParam(r, "inventoryId"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MoveItemInInventory(w, r, inventoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllItems operation middleware
func (siw *ServerInterfaceWrapper) GetAllItems(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllItems(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddItem operation middleware
func (siw *ServerInterfaceWrapper) AddItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddItem(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteItemById operation middleware
func (siw *ServerInterfaceWrapper) DeleteItemById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "itemId" -------------
	var itemId int64

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", chi.URLParam(r, "itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteItemById(w, r, itemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetItemById operation middleware
func (siw *ServerInterfaceWrapper) GetItemById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "itemId" -------------
	var itemId int64

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", chi.URLParam(r, "itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItemById(w, r, itemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateItemById operation middleware
func (siw *ServerInterfaceWrapper) UpdateItemById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "itemId" -------------
	var itemId int64

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", chi.URLParam(r, "itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateItemById(w, r, itemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAllUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddUser operation middleware
func (siw *ServerInterfaceWrapper) AddUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteUserById operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int64

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserById(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int64

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserById(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateUserById operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int64

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUserById(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMetrics operation middleware
func (siw *ServerInterfaceWrapper) GetMetrics(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMetrics(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOpenAPIHTML operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPIHTML(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOpenAPIHTMLParams

	// ------------- Optional query parameter "render" -------------

	err = runtime.BindQueryParameter("form", true, false, "render", r.URL.Query(), &params.Render)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "render", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPIHTML(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOpenAPIJSON operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPIJSON(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPIJSON(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVersion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/inventories", wrapper.GetAllInventories)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/inventories", wrapper.AddInventory)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/inventories/{inventoryId}", wrapper.DeleteInventoryById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/inventories/{inventoryId}", wrapper.GetInventoryById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/inventories/{inventoryId}", wrapper.UpdateInventoryById)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/inventories/{inventoryId}/add", wrapper.AddItemInInventory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/inventories/{inventoryId}/move", wrapper.MoveItemInInventory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/items", wrapper.GetAllItems)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/items", wrapper.AddItem)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/items/{itemId}", wrapper.DeleteItemById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/items/{itemId}", wrapper.GetItemById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/items/{itemId}", wrapper.UpdateItemById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/users", wrapper.GetAllUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/users", wrapper.AddUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/users/{userId}", wrapper.DeleteUserById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/users/{userId}", wrapper.GetUserById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/users/{userId}", wrapper.UpdateUserById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/info/metrics", wrapper.GetMetrics)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/info/openapi.html", wrapper.GetOpenAPIHTML)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/info/openapi.json", wrapper.GetOpenAPIJSON)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/info/status", wrapper.GetStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/info/version", wrapper.GetVersion)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//0Tx765elQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
