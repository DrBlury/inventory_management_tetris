// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all inventories
	// (GET /inventories)
	GetAllInventories(w http.ResponseWriter, r *http.Request)
	// Add new inventory
	// (POST /inventories)
	AddInventory(w http.ResponseWriter, r *http.Request)
	// Delete inventory by ID
	// (DELETE /inventories/{inventoryId})
	DeleteInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64)
	// Get inventory by ID
	// (GET /inventories/{inventoryId})
	GetInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64)
	// Add a new item to the inventory at the first possible position
	// (POST /inventories/{inventoryId}/add)
	AddItemInInventory(w http.ResponseWriter, r *http.Request, inventoryId int64)
	// Add a new item to the inventory at a specific position
	// (POST /inventories/{inventoryId}/addAtPosition)
	AddItemInInventoryAtPosition(w http.ResponseWriter, r *http.Request, inventoryId int64)
	// Move an item already in the inventory
	// (POST /inventories/{inventoryId}/move)
	MoveItemInInventory(w http.ResponseWriter, r *http.Request, inventoryId int64)
	// Get all items
	// (GET /items)
	GetAllItems(w http.ResponseWriter, r *http.Request)
	// Add new item
	// (POST /items)
	AddItem(w http.ResponseWriter, r *http.Request)
	// Delete item by ID
	// (DELETE /items/{itemId})
	DeleteItemById(w http.ResponseWriter, r *http.Request, itemId int64)
	// Get item by ID
	// (GET /items/{itemId})
	GetItemById(w http.ResponseWriter, r *http.Request, itemId int64)
	// Update an item
	// (PUT /items/{itemId})
	UpdateItemById(w http.ResponseWriter, r *http.Request, itemId int64)
	// Get all users
	// (GET /users)
	GetAllUsers(w http.ResponseWriter, r *http.Request)
	// Add new user
	// (POST /users)
	AddUser(w http.ResponseWriter, r *http.Request)
	// Delete user by ID
	// (DELETE /users/{userId})
	DeleteUserById(w http.ResponseWriter, r *http.Request, userId int64)
	// Get user by ID
	// (GET /users/{userId})
	GetUserById(w http.ResponseWriter, r *http.Request, userId int64)
	// Update an user
	// (PUT /users/{userId})
	UpdateUserById(w http.ResponseWriter, r *http.Request, userId int64)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all inventories
// (GET /inventories)
func (_ Unimplemented) GetAllInventories(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add new inventory
// (POST /inventories)
func (_ Unimplemented) AddInventory(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete inventory by ID
// (DELETE /inventories/{inventoryId})
func (_ Unimplemented) DeleteInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get inventory by ID
// (GET /inventories/{inventoryId})
func (_ Unimplemented) GetInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add a new item to the inventory at the first possible position
// (POST /inventories/{inventoryId}/add)
func (_ Unimplemented) AddItemInInventory(w http.ResponseWriter, r *http.Request, inventoryId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add a new item to the inventory at a specific position
// (POST /inventories/{inventoryId}/addAtPosition)
func (_ Unimplemented) AddItemInInventoryAtPosition(w http.ResponseWriter, r *http.Request, inventoryId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Move an item already in the inventory
// (POST /inventories/{inventoryId}/move)
func (_ Unimplemented) MoveItemInInventory(w http.ResponseWriter, r *http.Request, inventoryId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all items
// (GET /items)
func (_ Unimplemented) GetAllItems(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add new item
// (POST /items)
func (_ Unimplemented) AddItem(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete item by ID
// (DELETE /items/{itemId})
func (_ Unimplemented) DeleteItemById(w http.ResponseWriter, r *http.Request, itemId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get item by ID
// (GET /items/{itemId})
func (_ Unimplemented) GetItemById(w http.ResponseWriter, r *http.Request, itemId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an item
// (PUT /items/{itemId})
func (_ Unimplemented) UpdateItemById(w http.ResponseWriter, r *http.Request, itemId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all users
// (GET /users)
func (_ Unimplemented) GetAllUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add new user
// (POST /users)
func (_ Unimplemented) AddUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete user by ID
// (DELETE /users/{userId})
func (_ Unimplemented) DeleteUserById(w http.ResponseWriter, r *http.Request, userId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user by ID
// (GET /users/{userId})
func (_ Unimplemented) GetUserById(w http.ResponseWriter, r *http.Request, userId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an user
// (PUT /users/{userId})
func (_ Unimplemented) UpdateUserById(w http.ResponseWriter, r *http.Request, userId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllInventories operation middleware
func (siw *ServerInterfaceWrapper) GetAllInventories(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllInventories(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddInventory operation middleware
func (siw *ServerInterfaceWrapper) AddInventory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddInventory(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteInventoryById operation middleware
func (siw *ServerInterfaceWrapper) DeleteInventoryById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "inventoryId" -------------
	var inventoryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "inventoryId", chi.URLParam(r, "inventoryId"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteInventoryById(w, r, inventoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetInventoryById operation middleware
func (siw *ServerInterfaceWrapper) GetInventoryById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "inventoryId" -------------
	var inventoryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "inventoryId", chi.URLParam(r, "inventoryId"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInventoryById(w, r, inventoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddItemInInventory operation middleware
func (siw *ServerInterfaceWrapper) AddItemInInventory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "inventoryId" -------------
	var inventoryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "inventoryId", chi.URLParam(r, "inventoryId"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddItemInInventory(w, r, inventoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddItemInInventoryAtPosition operation middleware
func (siw *ServerInterfaceWrapper) AddItemInInventoryAtPosition(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "inventoryId" -------------
	var inventoryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "inventoryId", chi.URLParam(r, "inventoryId"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddItemInInventoryAtPosition(w, r, inventoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// MoveItemInInventory operation middleware
func (siw *ServerInterfaceWrapper) MoveItemInInventory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "inventoryId" -------------
	var inventoryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "inventoryId", chi.URLParam(r, "inventoryId"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MoveItemInInventory(w, r, inventoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllItems operation middleware
func (siw *ServerInterfaceWrapper) GetAllItems(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllItems(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddItem operation middleware
func (siw *ServerInterfaceWrapper) AddItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddItem(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteItemById operation middleware
func (siw *ServerInterfaceWrapper) DeleteItemById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "itemId" -------------
	var itemId int64

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", chi.URLParam(r, "itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteItemById(w, r, itemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetItemById operation middleware
func (siw *ServerInterfaceWrapper) GetItemById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "itemId" -------------
	var itemId int64

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", chi.URLParam(r, "itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItemById(w, r, itemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateItemById operation middleware
func (siw *ServerInterfaceWrapper) UpdateItemById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "itemId" -------------
	var itemId int64

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", chi.URLParam(r, "itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateItemById(w, r, itemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAllUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddUser operation middleware
func (siw *ServerInterfaceWrapper) AddUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteUserById operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int64

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserById(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int64

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserById(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateUserById operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int64

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUserById(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/inventories", wrapper.GetAllInventories)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/inventories", wrapper.AddInventory)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/inventories/{inventoryId}", wrapper.DeleteInventoryById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/inventories/{inventoryId}", wrapper.GetInventoryById)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/inventories/{inventoryId}/add", wrapper.AddItemInInventory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/inventories/{inventoryId}/addAtPosition", wrapper.AddItemInInventoryAtPosition)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/inventories/{inventoryId}/move", wrapper.MoveItemInInventory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/items", wrapper.GetAllItems)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/items", wrapper.AddItem)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/items/{itemId}", wrapper.DeleteItemById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/items/{itemId}", wrapper.GetItemById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/items/{itemId}", wrapper.UpdateItemById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users", wrapper.GetAllUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users", wrapper.AddUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{userId}", wrapper.DeleteUserById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{userId}", wrapper.GetUserById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/users/{userId}", wrapper.UpdateUserById)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
