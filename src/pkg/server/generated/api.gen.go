// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all inventories
	// (GET /api/inventories)
	GetAllInventories(w http.ResponseWriter, r *http.Request)
	// Add new inventory
	// (POST /api/inventories)
	AddInventory(w http.ResponseWriter, r *http.Request)
	// Delete an inventory
	// (DELETE /api/inventories/{inventoryId})
	DeleteInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64)
	// Get inventory by ID
	// (GET /api/inventories/{inventoryId})
	GetInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64)
	// Update an inventory
	// (PUT /api/inventories/{inventoryId})
	UpdateInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64)
	// Add item to inventory (with optional position)
	// (POST /api/inventories/{inventoryId}/add)
	AddItemInInventory(w http.ResponseWriter, r *http.Request, inventoryId int64)
	// Move item in Inventory
	// (POST /api/inventories/{inventoryId}/move)
	MoveItemInInventory(w http.ResponseWriter, r *http.Request, inventoryId int64)
	// Get all items
	// (GET /api/items)
	GetAllItems(w http.ResponseWriter, r *http.Request)
	// Add a new item
	// (POST /api/items)
	AddItem(w http.ResponseWriter, r *http.Request)
	// Delete an item
	// (DELETE /api/items/{itemId})
	DeleteItemById(w http.ResponseWriter, r *http.Request, itemId int64)
	// Get item
	// (GET /api/items/{itemId})
	GetItemById(w http.ResponseWriter, r *http.Request, itemId int64)
	// Update an item
	// (PUT /api/items/{itemId})
	UpdateItemById(w http.ResponseWriter, r *http.Request, itemId int64)
	// Get all users
	// (GET /api/users)
	GetAllUsers(w http.ResponseWriter, r *http.Request)
	// Add a new user
	// (POST /api/users)
	AddUser(w http.ResponseWriter, r *http.Request)
	// Delete a user
	// (DELETE /api/users/{userId})
	DeleteUserById(w http.ResponseWriter, r *http.Request, userId int64)
	// Get a user
	// (GET /api/users/{userId})
	GetUserById(w http.ResponseWriter, r *http.Request, userId int64)
	// Update a user
	// (PUT /api/users/{userId})
	UpdateUserById(w http.ResponseWriter, r *http.Request, userId int64)
	// Get metrics for the service
	// (GET /info/metrics)
	GetMetrics(w http.ResponseWriter, r *http.Request)
	// Get describing html of openapi spec
	// (GET /info/openapi.html)
	GetOpenAPIHTML(w http.ResponseWriter, r *http.Request, params GetOpenAPIHTMLParams)
	// Get openapi spec as json
	// (GET /info/openapi.json)
	GetOpenAPIJSON(w http.ResponseWriter, r *http.Request)
	// Get status of the service
	// (GET /info/status)
	GetStatus(w http.ResponseWriter, r *http.Request)
	// Get version info of the service
	// (GET /info/version)
	GetVersion(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all inventories
// (GET /api/inventories)
func (_ Unimplemented) GetAllInventories(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add new inventory
// (POST /api/inventories)
func (_ Unimplemented) AddInventory(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an inventory
// (DELETE /api/inventories/{inventoryId})
func (_ Unimplemented) DeleteInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get inventory by ID
// (GET /api/inventories/{inventoryId})
func (_ Unimplemented) GetInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an inventory
// (PUT /api/inventories/{inventoryId})
func (_ Unimplemented) UpdateInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add item to inventory (with optional position)
// (POST /api/inventories/{inventoryId}/add)
func (_ Unimplemented) AddItemInInventory(w http.ResponseWriter, r *http.Request, inventoryId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Move item in Inventory
// (POST /api/inventories/{inventoryId}/move)
func (_ Unimplemented) MoveItemInInventory(w http.ResponseWriter, r *http.Request, inventoryId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all items
// (GET /api/items)
func (_ Unimplemented) GetAllItems(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add a new item
// (POST /api/items)
func (_ Unimplemented) AddItem(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an item
// (DELETE /api/items/{itemId})
func (_ Unimplemented) DeleteItemById(w http.ResponseWriter, r *http.Request, itemId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get item
// (GET /api/items/{itemId})
func (_ Unimplemented) GetItemById(w http.ResponseWriter, r *http.Request, itemId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an item
// (PUT /api/items/{itemId})
func (_ Unimplemented) UpdateItemById(w http.ResponseWriter, r *http.Request, itemId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all users
// (GET /api/users)
func (_ Unimplemented) GetAllUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add a new user
// (POST /api/users)
func (_ Unimplemented) AddUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a user
// (DELETE /api/users/{userId})
func (_ Unimplemented) DeleteUserById(w http.ResponseWriter, r *http.Request, userId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a user
// (GET /api/users/{userId})
func (_ Unimplemented) GetUserById(w http.ResponseWriter, r *http.Request, userId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a user
// (PUT /api/users/{userId})
func (_ Unimplemented) UpdateUserById(w http.ResponseWriter, r *http.Request, userId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get metrics for the service
// (GET /info/metrics)
func (_ Unimplemented) GetMetrics(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get describing html of openapi spec
// (GET /info/openapi.html)
func (_ Unimplemented) GetOpenAPIHTML(w http.ResponseWriter, r *http.Request, params GetOpenAPIHTMLParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get openapi spec as json
// (GET /info/openapi.json)
func (_ Unimplemented) GetOpenAPIJSON(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get status of the service
// (GET /info/status)
func (_ Unimplemented) GetStatus(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get version info of the service
// (GET /info/version)
func (_ Unimplemented) GetVersion(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllInventories operation middleware
func (siw *ServerInterfaceWrapper) GetAllInventories(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllInventories(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddInventory operation middleware
func (siw *ServerInterfaceWrapper) AddInventory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddInventory(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteInventoryById operation middleware
func (siw *ServerInterfaceWrapper) DeleteInventoryById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "inventoryId" -------------
	var inventoryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "inventoryId", chi.URLParam(r, "inventoryId"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteInventoryById(w, r, inventoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetInventoryById operation middleware
func (siw *ServerInterfaceWrapper) GetInventoryById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "inventoryId" -------------
	var inventoryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "inventoryId", chi.URLParam(r, "inventoryId"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInventoryById(w, r, inventoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateInventoryById operation middleware
func (siw *ServerInterfaceWrapper) UpdateInventoryById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "inventoryId" -------------
	var inventoryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "inventoryId", chi.URLParam(r, "inventoryId"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateInventoryById(w, r, inventoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddItemInInventory operation middleware
func (siw *ServerInterfaceWrapper) AddItemInInventory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "inventoryId" -------------
	var inventoryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "inventoryId", chi.URLParam(r, "inventoryId"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddItemInInventory(w, r, inventoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// MoveItemInInventory operation middleware
func (siw *ServerInterfaceWrapper) MoveItemInInventory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "inventoryId" -------------
	var inventoryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "inventoryId", chi.URLParam(r, "inventoryId"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MoveItemInInventory(w, r, inventoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllItems operation middleware
func (siw *ServerInterfaceWrapper) GetAllItems(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllItems(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddItem operation middleware
func (siw *ServerInterfaceWrapper) AddItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddItem(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteItemById operation middleware
func (siw *ServerInterfaceWrapper) DeleteItemById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "itemId" -------------
	var itemId int64

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", chi.URLParam(r, "itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteItemById(w, r, itemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetItemById operation middleware
func (siw *ServerInterfaceWrapper) GetItemById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "itemId" -------------
	var itemId int64

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", chi.URLParam(r, "itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItemById(w, r, itemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateItemById operation middleware
func (siw *ServerInterfaceWrapper) UpdateItemById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "itemId" -------------
	var itemId int64

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", chi.URLParam(r, "itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateItemById(w, r, itemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAllUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddUser operation middleware
func (siw *ServerInterfaceWrapper) AddUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteUserById operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int64

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserById(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int64

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserById(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateUserById operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int64

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUserById(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMetrics operation middleware
func (siw *ServerInterfaceWrapper) GetMetrics(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMetrics(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOpenAPIHTML operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPIHTML(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOpenAPIHTMLParams

	// ------------- Optional query parameter "render" -------------

	err = runtime.BindQueryParameter("form", true, false, "render", r.URL.Query(), &params.Render)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "render", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPIHTML(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOpenAPIJSON operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPIJSON(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPIJSON(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVersion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/inventories", wrapper.GetAllInventories)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/inventories", wrapper.AddInventory)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/inventories/{inventoryId}", wrapper.DeleteInventoryById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/inventories/{inventoryId}", wrapper.GetInventoryById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/inventories/{inventoryId}", wrapper.UpdateInventoryById)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/inventories/{inventoryId}/add", wrapper.AddItemInInventory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/inventories/{inventoryId}/move", wrapper.MoveItemInInventory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/items", wrapper.GetAllItems)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/items", wrapper.AddItem)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/items/{itemId}", wrapper.DeleteItemById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/items/{itemId}", wrapper.GetItemById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/items/{itemId}", wrapper.UpdateItemById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/users", wrapper.GetAllUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/users", wrapper.AddUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/users/{userId}", wrapper.DeleteUserById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/users/{userId}", wrapper.GetUserById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/users/{userId}", wrapper.UpdateUserById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/info/metrics", wrapper.GetMetrics)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/info/openapi.html", wrapper.GetOpenAPIHTML)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/info/openapi.json", wrapper.GetOpenAPIJSON)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/info/status", wrapper.GetStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/info/version", wrapper.GetVersion)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
