// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all inventories
	// (GET /api/inventories)
	GetAllInventories(w http.ResponseWriter, r *http.Request)
	// Add new inventory
	// (POST /api/inventories)
	AddInventory(w http.ResponseWriter, r *http.Request)
	// Delete an inventory
	// (DELETE /api/inventories/{inventoryId})
	DeleteInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64)
	// Get inventory by ID
	// (GET /api/inventories/{inventoryId})
	GetInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64)
	// Update an inventory
	// (PUT /api/inventories/{inventoryId})
	UpdateInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64)
	// Add item to inventory (with optional position)
	// (POST /api/inventories/{inventoryId}/add)
	AddItemInInventory(w http.ResponseWriter, r *http.Request, inventoryId int64)
	// Move item in Inventory
	// (POST /api/inventories/{inventoryId}/move)
	MoveItemInInventory(w http.ResponseWriter, r *http.Request, inventoryId int64)
	// Get all items
	// (GET /api/items)
	GetAllItems(w http.ResponseWriter, r *http.Request)
	// Add a new item
	// (POST /api/items)
	AddItem(w http.ResponseWriter, r *http.Request)
	// Delete an item
	// (DELETE /api/items/{itemId})
	DeleteItemById(w http.ResponseWriter, r *http.Request, itemId int64)
	// Get item
	// (GET /api/items/{itemId})
	GetItemById(w http.ResponseWriter, r *http.Request, itemId int64)
	// Update an item
	// (PUT /api/items/{itemId})
	UpdateItemById(w http.ResponseWriter, r *http.Request, itemId int64)
	// Get all users
	// (GET /api/users)
	GetAllUsers(w http.ResponseWriter, r *http.Request)
	// Add a new user
	// (POST /api/users)
	AddUser(w http.ResponseWriter, r *http.Request)
	// Delete a user
	// (DELETE /api/users/{userId})
	DeleteUserById(w http.ResponseWriter, r *http.Request, userId int64)
	// Get a user
	// (GET /api/users/{userId})
	GetUserById(w http.ResponseWriter, r *http.Request, userId int64)
	// Update a user
	// (PUT /api/users/{userId})
	UpdateUserById(w http.ResponseWriter, r *http.Request, userId int64)
	// Get metrics for the service
	// (GET /info/metrics)
	GetMetrics(w http.ResponseWriter, r *http.Request)
	// Get describing html of openapi spec
	// (GET /info/openapi.html)
	GetOpenAPIHTML(w http.ResponseWriter, r *http.Request, params GetOpenAPIHTMLParams)
	// Get openapi spec as json
	// (GET /info/openapi.json)
	GetOpenAPIJSON(w http.ResponseWriter, r *http.Request)
	// Get status of the service
	// (GET /info/status)
	GetStatus(w http.ResponseWriter, r *http.Request)
	// Get version info of the service
	// (GET /info/version)
	GetVersion(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all inventories
// (GET /api/inventories)
func (_ Unimplemented) GetAllInventories(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add new inventory
// (POST /api/inventories)
func (_ Unimplemented) AddInventory(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an inventory
// (DELETE /api/inventories/{inventoryId})
func (_ Unimplemented) DeleteInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get inventory by ID
// (GET /api/inventories/{inventoryId})
func (_ Unimplemented) GetInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an inventory
// (PUT /api/inventories/{inventoryId})
func (_ Unimplemented) UpdateInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add item to inventory (with optional position)
// (POST /api/inventories/{inventoryId}/add)
func (_ Unimplemented) AddItemInInventory(w http.ResponseWriter, r *http.Request, inventoryId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Move item in Inventory
// (POST /api/inventories/{inventoryId}/move)
func (_ Unimplemented) MoveItemInInventory(w http.ResponseWriter, r *http.Request, inventoryId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all items
// (GET /api/items)
func (_ Unimplemented) GetAllItems(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add a new item
// (POST /api/items)
func (_ Unimplemented) AddItem(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an item
// (DELETE /api/items/{itemId})
func (_ Unimplemented) DeleteItemById(w http.ResponseWriter, r *http.Request, itemId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get item
// (GET /api/items/{itemId})
func (_ Unimplemented) GetItemById(w http.ResponseWriter, r *http.Request, itemId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an item
// (PUT /api/items/{itemId})
func (_ Unimplemented) UpdateItemById(w http.ResponseWriter, r *http.Request, itemId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all users
// (GET /api/users)
func (_ Unimplemented) GetAllUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add a new user
// (POST /api/users)
func (_ Unimplemented) AddUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a user
// (DELETE /api/users/{userId})
func (_ Unimplemented) DeleteUserById(w http.ResponseWriter, r *http.Request, userId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a user
// (GET /api/users/{userId})
func (_ Unimplemented) GetUserById(w http.ResponseWriter, r *http.Request, userId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a user
// (PUT /api/users/{userId})
func (_ Unimplemented) UpdateUserById(w http.ResponseWriter, r *http.Request, userId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get metrics for the service
// (GET /info/metrics)
func (_ Unimplemented) GetMetrics(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get describing html of openapi spec
// (GET /info/openapi.html)
func (_ Unimplemented) GetOpenAPIHTML(w http.ResponseWriter, r *http.Request, params GetOpenAPIHTMLParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get openapi spec as json
// (GET /info/openapi.json)
func (_ Unimplemented) GetOpenAPIJSON(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get status of the service
// (GET /info/status)
func (_ Unimplemented) GetStatus(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get version info of the service
// (GET /info/version)
func (_ Unimplemented) GetVersion(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllInventories operation middleware
func (siw *ServerInterfaceWrapper) GetAllInventories(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllInventories(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddInventory operation middleware
func (siw *ServerInterfaceWrapper) AddInventory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddInventory(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteInventoryById operation middleware
func (siw *ServerInterfaceWrapper) DeleteInventoryById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "inventoryId" -------------
	var inventoryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "inventoryId", chi.URLParam(r, "inventoryId"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteInventoryById(w, r, inventoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetInventoryById operation middleware
func (siw *ServerInterfaceWrapper) GetInventoryById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "inventoryId" -------------
	var inventoryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "inventoryId", chi.URLParam(r, "inventoryId"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInventoryById(w, r, inventoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateInventoryById operation middleware
func (siw *ServerInterfaceWrapper) UpdateInventoryById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "inventoryId" -------------
	var inventoryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "inventoryId", chi.URLParam(r, "inventoryId"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateInventoryById(w, r, inventoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddItemInInventory operation middleware
func (siw *ServerInterfaceWrapper) AddItemInInventory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "inventoryId" -------------
	var inventoryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "inventoryId", chi.URLParam(r, "inventoryId"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddItemInInventory(w, r, inventoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// MoveItemInInventory operation middleware
func (siw *ServerInterfaceWrapper) MoveItemInInventory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "inventoryId" -------------
	var inventoryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "inventoryId", chi.URLParam(r, "inventoryId"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MoveItemInInventory(w, r, inventoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllItems operation middleware
func (siw *ServerInterfaceWrapper) GetAllItems(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllItems(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddItem operation middleware
func (siw *ServerInterfaceWrapper) AddItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddItem(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteItemById operation middleware
func (siw *ServerInterfaceWrapper) DeleteItemById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "itemId" -------------
	var itemId int64

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", chi.URLParam(r, "itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteItemById(w, r, itemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetItemById operation middleware
func (siw *ServerInterfaceWrapper) GetItemById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "itemId" -------------
	var itemId int64

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", chi.URLParam(r, "itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItemById(w, r, itemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateItemById operation middleware
func (siw *ServerInterfaceWrapper) UpdateItemById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "itemId" -------------
	var itemId int64

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", chi.URLParam(r, "itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateItemById(w, r, itemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAllUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddUser operation middleware
func (siw *ServerInterfaceWrapper) AddUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteUserById operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int64

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserById(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int64

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserById(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateUserById operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int64

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUserById(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMetrics operation middleware
func (siw *ServerInterfaceWrapper) GetMetrics(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMetrics(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOpenAPIHTML operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPIHTML(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOpenAPIHTMLParams

	// ------------- Optional query parameter "render" -------------

	err = runtime.BindQueryParameter("form", true, false, "render", r.URL.Query(), &params.Render)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "render", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPIHTML(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOpenAPIJSON operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPIJSON(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPIJSON(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVersion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/inventories", wrapper.GetAllInventories)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/inventories", wrapper.AddInventory)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/inventories/{inventoryId}", wrapper.DeleteInventoryById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/inventories/{inventoryId}", wrapper.GetInventoryById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/inventories/{inventoryId}", wrapper.UpdateInventoryById)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/inventories/{inventoryId}/add", wrapper.AddItemInInventory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/inventories/{inventoryId}/move", wrapper.MoveItemInInventory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/items", wrapper.GetAllItems)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/items", wrapper.AddItem)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/items/{itemId}", wrapper.DeleteItemById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/items/{itemId}", wrapper.GetItemById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/items/{itemId}", wrapper.UpdateItemById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/users", wrapper.GetAllUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/users", wrapper.AddUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/users/{userId}", wrapper.DeleteUserById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/users/{userId}", wrapper.GetUserById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/users/{userId}", wrapper.UpdateUserById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/info/metrics", wrapper.GetMetrics)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/info/openapi.html", wrapper.GetOpenAPIHTML)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/info/openapi.json", wrapper.GetOpenAPIJSON)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/info/status", wrapper.GetStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/info/version", wrapper.GetVersion)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"HqzlLEt7VTm5ePz/AAAA//+GhGcQCJUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
