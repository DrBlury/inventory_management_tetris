// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all inventories
	// (GET /api/inventories)
	GetAllInventories(w http.ResponseWriter, r *http.Request)
	// Add new inventory
	// (POST /api/inventories)
	AddInventory(w http.ResponseWriter, r *http.Request)
	// Delete inventory by ID
	// (DELETE /api/inventories/{inventoryId})
	DeleteInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64)
	// Get inventory by ID
	// (GET /api/inventories/{inventoryId})
	GetInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64)
	// Update an inventory
	// (PUT /api/inventories/{inventoryId})
	UpdateInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64)
	// Add a new item to the inventory at the first possible position
	// (POST /api/inventories/{inventoryId}/add)
	AddItemInInventory(w http.ResponseWriter, r *http.Request, inventoryId int64)
	// Move an item already in the inventory
	// (POST /api/inventories/{inventoryId}/move)
	MoveItemInInventory(w http.ResponseWriter, r *http.Request, inventoryId int64)
	// Get all items
	// (GET /api/items)
	GetAllItems(w http.ResponseWriter, r *http.Request)
	// Add new item
	// (POST /api/items)
	AddItem(w http.ResponseWriter, r *http.Request)
	// Delete item by ID
	// (DELETE /api/items/{itemId})
	DeleteItemById(w http.ResponseWriter, r *http.Request, itemId int64)
	// Get item by ID
	// (GET /api/items/{itemId})
	GetItemById(w http.ResponseWriter, r *http.Request, itemId int64)
	// Update an item
	// (PUT /api/items/{itemId})
	UpdateItemById(w http.ResponseWriter, r *http.Request, itemId int64)
	// Get all users
	// (GET /api/users)
	GetAllUsers(w http.ResponseWriter, r *http.Request)
	// Add new user
	// (POST /api/users)
	AddUser(w http.ResponseWriter, r *http.Request)
	// Delete user by ID
	// (DELETE /api/users/{userId})
	DeleteUserById(w http.ResponseWriter, r *http.Request, userId int64)
	// Get user by ID
	// (GET /api/users/{userId})
	GetUserById(w http.ResponseWriter, r *http.Request, userId int64)
	// Update an user
	// (PUT /api/users/{userId})
	UpdateUserById(w http.ResponseWriter, r *http.Request, userId int64)
	// Get metrics
	// (GET /info/metrics)
	GetMetrics(w http.ResponseWriter, r *http.Request)
	// Get describing html of openapi spec
	// (GET /info/openapi.html)
	GetOpenAPIHTML(w http.ResponseWriter, r *http.Request, params GetOpenAPIHTMLParams)
	// Get openapi spec as json
	// (GET /info/openapi.json)
	GetOpenAPIJSON(w http.ResponseWriter, r *http.Request)
	// Get status of the service
	// (GET /info/status)
	GetStatus(w http.ResponseWriter, r *http.Request)
	// Get version info of the service
	// (GET /info/version)
	GetVersion(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all inventories
// (GET /api/inventories)
func (_ Unimplemented) GetAllInventories(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add new inventory
// (POST /api/inventories)
func (_ Unimplemented) AddInventory(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete inventory by ID
// (DELETE /api/inventories/{inventoryId})
func (_ Unimplemented) DeleteInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get inventory by ID
// (GET /api/inventories/{inventoryId})
func (_ Unimplemented) GetInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an inventory
// (PUT /api/inventories/{inventoryId})
func (_ Unimplemented) UpdateInventoryById(w http.ResponseWriter, r *http.Request, inventoryId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add a new item to the inventory at the first possible position
// (POST /api/inventories/{inventoryId}/add)
func (_ Unimplemented) AddItemInInventory(w http.ResponseWriter, r *http.Request, inventoryId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Move an item already in the inventory
// (POST /api/inventories/{inventoryId}/move)
func (_ Unimplemented) MoveItemInInventory(w http.ResponseWriter, r *http.Request, inventoryId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all items
// (GET /api/items)
func (_ Unimplemented) GetAllItems(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add new item
// (POST /api/items)
func (_ Unimplemented) AddItem(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete item by ID
// (DELETE /api/items/{itemId})
func (_ Unimplemented) DeleteItemById(w http.ResponseWriter, r *http.Request, itemId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get item by ID
// (GET /api/items/{itemId})
func (_ Unimplemented) GetItemById(w http.ResponseWriter, r *http.Request, itemId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an item
// (PUT /api/items/{itemId})
func (_ Unimplemented) UpdateItemById(w http.ResponseWriter, r *http.Request, itemId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all users
// (GET /api/users)
func (_ Unimplemented) GetAllUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add new user
// (POST /api/users)
func (_ Unimplemented) AddUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete user by ID
// (DELETE /api/users/{userId})
func (_ Unimplemented) DeleteUserById(w http.ResponseWriter, r *http.Request, userId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user by ID
// (GET /api/users/{userId})
func (_ Unimplemented) GetUserById(w http.ResponseWriter, r *http.Request, userId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an user
// (PUT /api/users/{userId})
func (_ Unimplemented) UpdateUserById(w http.ResponseWriter, r *http.Request, userId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get metrics
// (GET /info/metrics)
func (_ Unimplemented) GetMetrics(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get describing html of openapi spec
// (GET /info/openapi.html)
func (_ Unimplemented) GetOpenAPIHTML(w http.ResponseWriter, r *http.Request, params GetOpenAPIHTMLParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get openapi spec as json
// (GET /info/openapi.json)
func (_ Unimplemented) GetOpenAPIJSON(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get status of the service
// (GET /info/status)
func (_ Unimplemented) GetStatus(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get version info of the service
// (GET /info/version)
func (_ Unimplemented) GetVersion(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllInventories operation middleware
func (siw *ServerInterfaceWrapper) GetAllInventories(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllInventories(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddInventory operation middleware
func (siw *ServerInterfaceWrapper) AddInventory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddInventory(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteInventoryById operation middleware
func (siw *ServerInterfaceWrapper) DeleteInventoryById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "inventoryId" -------------
	var inventoryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "inventoryId", chi.URLParam(r, "inventoryId"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteInventoryById(w, r, inventoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetInventoryById operation middleware
func (siw *ServerInterfaceWrapper) GetInventoryById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "inventoryId" -------------
	var inventoryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "inventoryId", chi.URLParam(r, "inventoryId"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInventoryById(w, r, inventoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateInventoryById operation middleware
func (siw *ServerInterfaceWrapper) UpdateInventoryById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "inventoryId" -------------
	var inventoryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "inventoryId", chi.URLParam(r, "inventoryId"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateInventoryById(w, r, inventoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddItemInInventory operation middleware
func (siw *ServerInterfaceWrapper) AddItemInInventory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "inventoryId" -------------
	var inventoryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "inventoryId", chi.URLParam(r, "inventoryId"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddItemInInventory(w, r, inventoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// MoveItemInInventory operation middleware
func (siw *ServerInterfaceWrapper) MoveItemInInventory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "inventoryId" -------------
	var inventoryId int64

	err = runtime.BindStyledParameterWithOptions("simple", "inventoryId", chi.URLParam(r, "inventoryId"), &inventoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "inventoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MoveItemInInventory(w, r, inventoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllItems operation middleware
func (siw *ServerInterfaceWrapper) GetAllItems(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllItems(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddItem operation middleware
func (siw *ServerInterfaceWrapper) AddItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddItem(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteItemById operation middleware
func (siw *ServerInterfaceWrapper) DeleteItemById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "itemId" -------------
	var itemId int64

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", chi.URLParam(r, "itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteItemById(w, r, itemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetItemById operation middleware
func (siw *ServerInterfaceWrapper) GetItemById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "itemId" -------------
	var itemId int64

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", chi.URLParam(r, "itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItemById(w, r, itemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateItemById operation middleware
func (siw *ServerInterfaceWrapper) UpdateItemById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "itemId" -------------
	var itemId int64

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", chi.URLParam(r, "itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateItemById(w, r, itemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAllUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAllUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddUser operation middleware
func (siw *ServerInterfaceWrapper) AddUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteUserById operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int64

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserById(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int64

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserById(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateUserById operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int64

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUserById(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMetrics operation middleware
func (siw *ServerInterfaceWrapper) GetMetrics(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMetrics(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOpenAPIHTML operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPIHTML(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOpenAPIHTMLParams

	// ------------- Optional query parameter "render" -------------

	err = runtime.BindQueryParameter("form", true, false, "render", r.URL.Query(), &params.Render)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "render", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPIHTML(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOpenAPIJSON operation middleware
func (siw *ServerInterfaceWrapper) GetOpenAPIJSON(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOpenAPIJSON(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVersion(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/inventories", wrapper.GetAllInventories)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/inventories", wrapper.AddInventory)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/inventories/{inventoryId}", wrapper.DeleteInventoryById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/inventories/{inventoryId}", wrapper.GetInventoryById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/inventories/{inventoryId}", wrapper.UpdateInventoryById)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/inventories/{inventoryId}/add", wrapper.AddItemInInventory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/inventories/{inventoryId}/move", wrapper.MoveItemInInventory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/items", wrapper.GetAllItems)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/items", wrapper.AddItem)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/items/{itemId}", wrapper.DeleteItemById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/items/{itemId}", wrapper.GetItemById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/items/{itemId}", wrapper.UpdateItemById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/users", wrapper.GetAllUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/users", wrapper.AddUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/users/{userId}", wrapper.DeleteUserById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/users/{userId}", wrapper.GetUserById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/users/{userId}", wrapper.UpdateUserById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/info/metrics", wrapper.GetMetrics)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/info/openapi.html", wrapper.GetOpenAPIHTML)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/info/openapi.json", wrapper.GetOpenAPIJSON)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/info/status", wrapper.GetStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/info/version", wrapper.GetVersion)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"89X/AgAA///Ktv5vyWUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
