{
  "openapi": "3.1.0",
  "info": {
    "title": "Inventory Manager",
    "description": "Inventory Manager API",
    "version": "1.0.0",
    "contact": {
      "name": "LinuxCode",
      "email": "jbensch@linuxcode.net"
    },
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "/",
      "description": "This server"
    }
  ],
  "tags": [
    {
      "name": "inventory",
      "description": "Inventory operations"
    },
    {
      "name": "info",
      "description": "Information operations"
    },
    {
      "name": "item",
      "description": "Item operations"
    },
    {
      "name": "user",
      "description": "User operations"
    }
  ],
  "paths": {
    "/api/items": {
      "get": {
        "summary": "Get all items",
        "description": "Retrieve all items",
        "operationId": "getAllItems",
        "tags": [
          "item"
        ],
        "responses": {
          "200": {
            "description": "successful operation - returns a list of items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemListResponse"
                },
                "example": {
                  "items": [
                    {
                      "id": 1,
                      "variant": "rare",
                      "name": "Sword",
                      "text": "A sword that can be used to fight small enemies.",
                      "buy_value": 100,
                      "sell_value": 50,
                      "weight": 10,
                      "durability": 100,
                      "max_stack": 1,
                      "shape": {
                        "rawshape": "###",
                        "height": 3,
                        "width": 1
                      },
                      "type": "meleeWeapon"
                    },
                    {
                      "id": 2,
                      "variant": "common",
                      "name": "Shield",
                      "text": "A shield that can be used to block enemy attacks.",
                      "buy_value": 50,
                      "sell_value": 25,
                      "weight": 15,
                      "durability": 150,
                      "max_stack": 1,
                      "shape": {
                        "rawshape": "####",
                        "height": 2,
                        "width": 2
                      },
                      "type": "meleeWeapon"
                    }
                  ],
                  "pagination": {
                    "page": 1,
                    "pages": 10,
                    "limit": 10,
                    "total": 100,
                    "offset": 0
                  }
                }
              }
            }
          },
          "404": {
            "description": "No items found"
          }
        },
        "security": []
      },
      "post": {
        "summary": "Add a new item",
        "description": "Add a new item to the system",
        "operationId": "addItem",
        "tags": [
          "item"
        ],
        "requestBody": {
          "required": true,
          "description": "Item to add to the system",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemPostRequest"
              },
              "example": {
                "name": "Sword",
                "variant": "Iron",
                "text": "A sword made of iron.",
                "buy_value": 200,
                "sell_value": 70,
                "weight": 20,
                "durability": 350,
                "max_stack": 1,
                "type": "meleeWeapon",
                "shape": {
                  "rawshape": "###",
                  "height": 3,
                  "width": 1
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Added item - returns the newly created item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                },
                "example": {
                  "id": 1,
                  "variant": "gigantic",
                  "name": "Sword",
                  "text": "A sword that can be used to fight gigantic enemies.",
                  "buy_value": 100,
                  "sell_value": 50,
                  "weight": 10,
                  "durability": 100,
                  "max_stack": 1,
                  "shape": {
                    "rawshape": "###",
                    "height": 3,
                    "width": 1
                  },
                  "type": "meleeWeapon"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - e.g. invalid item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "errorId": "123e4567-e89b-12d3-a456-426614174000",
                  "error": "The item does not exist",
                  "ErrorType": "Not Found",
                  "code": 404,
                  "timestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/items/{itemId}": {
      "get": {
        "summary": "Get item",
        "description": "Get an item by ID",
        "operationId": "getItemById",
        "tags": [
          "item"
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "description": "ID of item",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation - returns item",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  },
                  "example": {
                    "id": 1,
                    "variant": "gigantic",
                    "name": "Sword",
                    "text": "A sword that can be used to fight gigantic enemies.",
                    "buy_value": 100,
                    "sell_value": 50,
                    "weight": 10,
                    "durability": 100,
                    "max_stack": 1,
                    "shape": {
                      "rawshape": "###",
                      "height": 3,
                      "width": 1
                    },
                    "type": "meleeWeapon"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID of item supplied (e.g. not an integer) - could not return item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "errorId": "123e4567-e89b-12d3-a456-426614174000",
                  "error": "The item does not exist",
                  "ErrorType": "Not Found",
                  "code": 404,
                  "timestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          },
          "404": {
            "description": "Can not find item (item ID) to return"
          }
        },
        "security": []
      },
      "put": {
        "summary": "Update an item",
        "description": "Update an item by ID",
        "operationId": "updateItemById",
        "tags": [
          "item"
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "description": "ID of item that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Item object that needs to be updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemPostRequest"
              },
              "example": {
                "name": "Sword",
                "variant": "Iron",
                "text": "A sword made of iron.",
                "buy_value": 200,
                "sell_value": 70,
                "weight": 20,
                "durability": 350,
                "max_stack": 1,
                "type": "meleeWeapon",
                "shape": {
                  "rawshape": "###",
                  "height": 3,
                  "width": 1
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update done"
          },
          "400": {
            "description": "Invalid ID of Item supplied (e.g. not an integer) - could not update item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "errorId": "123e4567-e89b-12d3-a456-426614174000",
                  "error": "The item does not exist",
                  "ErrorType": "Not Found",
                  "code": 404,
                  "timestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          },
          "404": {
            "description": "Can not find item (item ID) to update"
          }
        },
        "security": []
      },
      "delete": {
        "summary": "Delete an item",
        "description": "Delete an item by ID",
        "operationId": "deleteItemById",
        "tags": [
          "item"
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "description": "ID of item to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted item (item ID)"
          },
          "400": {
            "description": "Invalid ID of Item supplied (e.g. not an integer) - could not delete item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "errorId": "123e4567-e89b-12d3-a456-426614174000",
                  "error": "The item does not exist",
                  "ErrorType": "Not Found",
                  "code": 404,
                  "timestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          },
          "404": {
            "description": "Can not find item (item ID) to delete"
          }
        },
        "security": []
      }
    },
    "/api/users": {
      "get": {
        "summary": "Get all users",
        "description": "Retrieve all users",
        "operationId": "getAllUsers",
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "successful operation - returns a list of users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListResponse"
                },
                "example": {
                  "users": [
                    {
                      "id": 1,
                      "username": "john_doe",
                      "email": "something@something.com",
                      "inventories": [
                        {
                          "id": 1,
                          "name": "Backpack",
                          "userId": 1,
                          "max_weight": 850,
                          "volume": {
                            "height": 3,
                            "width": 4
                          }
                        },
                        {
                          "id": 2,
                          "name": "Bank",
                          "userId": 1,
                          "max_weight": 10000,
                          "volume": {
                            "height": 10,
                            "width": 10
                          }
                        }
                      ]
                    },
                    {
                      "id": 2,
                      "username": "jane_doe",
                      "email": "different@something.com",
                      "inventories": [
                        {
                          "id": 3,
                          "name": "Big Backpack",
                          "userId": 2,
                          "max_weight": 1350,
                          "volume": {
                            "height": 5,
                            "width": 8
                          }
                        },
                        {
                          "id": 4,
                          "name": "Small Bank",
                          "userId": 2,
                          "max_weight": 1000,
                          "volume": {
                            "height": 7,
                            "width": 7
                          }
                        }
                      ]
                    }
                  ],
                  "pagination": {
                    "page": 1,
                    "pages": 10,
                    "limit": 10,
                    "total": 100,
                    "offset": 0
                  }
                }
              }
            }
          },
          "404": {
            "description": "No users found - no users in the system",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "errorId": "123e4567-e89b-12d3-a456-426614174000",
                  "error": "The item does not exist",
                  "ErrorType": "Not Found",
                  "code": 404,
                  "timestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          }
        },
        "security": []
      },
      "post": {
        "summary": "Add a new user",
        "description": "Add a new user to the system",
        "operationId": "addUser",
        "tags": [
          "user"
        ],
        "requestBody": {
          "description": "User to add to the system",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPostRequest"
              },
              "example": {
                "username": "john_doe",
                "email": "something@something.com"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Added user - returns the newly created user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "id": 1,
                  "username": "john_doe",
                  "email": "something@something.com",
                  "inventories": [
                    {
                      "id": 1,
                      "name": "Backpack",
                      "userId": 1,
                      "max_weight": 850,
                      "volume": {
                        "height": 3,
                        "width": 4
                      }
                    },
                    {
                      "id": 2,
                      "name": "Bank",
                      "userId": 1,
                      "max_weight": 10000,
                      "volume": {
                        "height": 10,
                        "width": 10
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - e.g. invalid user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "errorId": "123e4567-e89b-12d3-a456-426614174000",
                  "error": "The item does not exist",
                  "ErrorType": "Not Found",
                  "code": 404,
                  "timestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/users/{userId}": {
      "get": {
        "summary": "Get a user",
        "description": "Get a user by ID",
        "operationId": "getUserById",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/User"
                  },
                  "example": {
                    "id": 1,
                    "username": "john_doe",
                    "email": "something@something.com",
                    "inventories": [
                      {
                        "id": 1,
                        "name": "Backpack",
                        "userId": 1,
                        "max_weight": 850,
                        "volume": {
                          "height": 3,
                          "width": 4
                        }
                      },
                      {
                        "id": 2,
                        "name": "Bank",
                        "userId": 1,
                        "max_weight": 10000,
                        "volume": {
                          "height": 10,
                          "width": 10
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied - wrong format of user ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "errorId": "123e4567-e89b-12d3-a456-426614174000",
                  "error": "The item does not exist",
                  "ErrorType": "Not Found",
                  "code": 404,
                  "timestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          },
          "404": {
            "description": "Can not find user (user ID) to return"
          }
        },
        "security": []
      },
      "put": {
        "summary": "Update a user",
        "description": "Update a user by ID",
        "operationId": "updateUserById",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "required": true,
          "description": "User object that needs to be updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPostRequest"
              },
              "example": {
                "username": "john_doe",
                "email": "something@something.com"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update done - returns updated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "id": 1,
                  "username": "john_doe",
                  "email": "something@something.com",
                  "inventories": [
                    {
                      "id": 1,
                      "name": "Backpack",
                      "userId": 1,
                      "max_weight": 850,
                      "volume": {
                        "height": 3,
                        "width": 4
                      }
                    },
                    {
                      "id": 2,
                      "name": "Bank",
                      "userId": 1,
                      "max_weight": 10000,
                      "volume": {
                        "height": 10,
                        "width": 10
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request - wrong format of user ID or wrong format of user object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "errorId": "123e4567-e89b-12d3-a456-426614174000",
                  "error": "The item does not exist",
                  "ErrorType": "Not Found",
                  "code": 404,
                  "timestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          },
          "404": {
            "description": "Can not find user (user ID) to update"
          }
        },
        "security": []
      },
      "delete": {
        "summary": "Delete a user",
        "description": "Delete a user by ID",
        "operationId": "deleteUserById",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted user (user ID)"
          },
          "400": {
            "description": "Invalid ID supplied - wrong format of user ID, deletion not possible",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "errorId": "123e4567-e89b-12d3-a456-426614174000",
                  "error": "The item does not exist",
                  "ErrorType": "Not Found",
                  "code": 404,
                  "timestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          },
          "404": {
            "description": "Can not find user (user ID) to delete"
          }
        },
        "security": []
      }
    },
    "/api/inventories": {
      "get": {
        "summary": "Get all inventories",
        "description": "Retrieve all inventories",
        "operationId": "getAllInventories",
        "tags": [
          "inventory"
        ],
        "responses": {
          "200": {
            "description": "successful operation - returns a list of inventories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryListResponse"
                },
                "example": {
                  "inventories": [
                    {
                      "id": 1,
                      "name": "Backpack",
                      "userId": 1,
                      "max_weight": 850,
                      "volume": {
                        "height": 3,
                        "width": 4
                      }
                    },
                    {
                      "id": 2,
                      "name": "Chest",
                      "userId": 1,
                      "max_weight": 1500,
                      "volume": {
                        "height": 10,
                        "width": 10
                      }
                    }
                  ],
                  "pagination": {
                    "page": 1,
                    "pages": 10,
                    "limit": 10,
                    "total": 100,
                    "offset": 0
                  }
                }
              }
            }
          },
          "404": {
            "description": "No inventories found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "errorId": "123e4567-e89b-12d3-a456-426614174000",
                  "error": "The item does not exist",
                  "ErrorType": "Not Found",
                  "code": 404,
                  "timestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          }
        },
        "security": []
      },
      "post": {
        "summary": "Add new inventory",
        "description": "Add new inventory to the system",
        "operationId": "addInventory",
        "tags": [
          "inventory"
        ],
        "requestBody": {
          "required": true,
          "description": "Inventory to add to the system",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryPostRequest"
              },
              "example": {
                "name": "Backpack",
                "user_id": 1,
                "max_weight": 850,
                "volume": {
                  "height": 10,
                  "width": 10
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Added inventory - returns the newly created inventory",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Inventory"
                },
                "example": {
                  "inventoryMeta": {
                    "id": 1,
                    "name": "Backpack",
                    "userId": 1,
                    "max_weight": 850,
                    "volume": {
                      "height": 3,
                      "width": 4
                    }
                  },
                  "items": [
                    {
                      "item": {
                        "id": 1,
                        "variant": "rare",
                        "name": "Sword",
                        "text": "A sword that can be used to fight tiny enemies.",
                        "buy_value": 100,
                        "sell_value": 50,
                        "weight": 10,
                        "durability": 100,
                        "max_stack": 1,
                        "shape": {
                          "rawshape": "###",
                          "height": 3,
                          "width": 1
                        },
                        "type": "meleeWeapon"
                      },
                      "position": {
                        "x": 0,
                        "y": 0,
                        "rotation": 0
                      },
                      "quantity": 1,
                      "durability_left": 70
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request - e.g. invalid inventory",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "errorId": "123e4567-e89b-12d3-a456-426614174000",
                  "error": "The item does not exist",
                  "ErrorType": "Not Found",
                  "code": 404,
                  "timestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/inventories/{inventoryId}": {
      "get": {
        "summary": "Get inventory by ID",
        "description": "Retrieve an inventory by ID",
        "operationId": "getInventoryById",
        "tags": [
          "inventory"
        ],
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of inventory to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation - returns inventory",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Inventory"
                },
                "example": {
                  "inventoryMeta": {
                    "id": 1,
                    "name": "Backpack",
                    "userId": 1,
                    "max_weight": 850,
                    "volume": {
                      "height": 3,
                      "width": 4
                    }
                  },
                  "items": [
                    {
                      "item": {
                        "id": 1,
                        "variant": "rare",
                        "name": "Sword",
                        "text": "A sword that can be used to fight tiny enemies.",
                        "buy_value": 100,
                        "sell_value": 50,
                        "weight": 10,
                        "durability": 100,
                        "max_stack": 1,
                        "shape": {
                          "rawshape": "###",
                          "height": 3,
                          "width": 1
                        },
                        "type": "meleeWeapon"
                      },
                      "position": {
                        "x": 0,
                        "y": 0,
                        "rotation": 0
                      },
                      "quantity": 1,
                      "durability_left": 70
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied (e.g. not an integer) - can not find inventory",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "errorId": "123e4567-e89b-12d3-a456-426614174000",
                  "error": "The item does not exist",
                  "ErrorType": "Not Found",
                  "code": 404,
                  "timestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          },
          "404": {
            "description": "Can not find inventory (inventory ID) to return"
          }
        },
        "security": []
      },
      "put": {
        "summary": "Update an inventory",
        "description": "Update an inventory by ID",
        "operationId": "updateInventoryById",
        "tags": [
          "inventory"
        ],
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of inventory to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Inventory object that needs to be updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryPostRequest"
              },
              "example": {
                "name": "Backpack",
                "user_id": 1,
                "max_weight": 850,
                "volume": {
                  "height": 10,
                  "width": 10
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update done - returns updated inventory",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Inventory"
                },
                "example": {
                  "inventoryMeta": {
                    "id": 1,
                    "name": "Backpack",
                    "userId": 1,
                    "max_weight": 850,
                    "volume": {
                      "height": 3,
                      "width": 4
                    }
                  },
                  "items": [
                    {
                      "item": {
                        "id": 1,
                        "variant": "rare",
                        "name": "Sword",
                        "text": "A sword that can be used to fight tiny enemies.",
                        "buy_value": 100,
                        "sell_value": 50,
                        "weight": 10,
                        "durability": 100,
                        "max_stack": 1,
                        "shape": {
                          "rawshape": "###",
                          "height": 3,
                          "width": 1
                        },
                        "type": "meleeWeapon"
                      },
                      "position": {
                        "x": 0,
                        "y": 0,
                        "rotation": 0
                      },
                      "quantity": 1,
                      "durability_left": 70
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied (e.g. not an integer) - can not update inventory",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "errorId": "123e4567-e89b-12d3-a456-426614174000",
                  "error": "The item does not exist",
                  "ErrorType": "Not Found",
                  "code": 404,
                  "timestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          },
          "404": {
            "description": "Can not find inventory (inventory ID) to update"
          }
        },
        "security": []
      },
      "delete": {
        "summary": "Delete an inventory",
        "description": "Delete an inventory by ID",
        "operationId": "deleteInventoryById",
        "tags": [
          "inventory"
        ],
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of inventory to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted inventory (inventory ID)"
          },
          "400": {
            "description": "Invalid ID supplied (e.g. not an integer) - can not delete inventory",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "errorId": "123e4567-e89b-12d3-a456-426614174000",
                  "error": "The item does not exist",
                  "ErrorType": "Not Found",
                  "code": 404,
                  "timestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          },
          "404": {
            "description": "Can not find inventory (inventory ID) to delete"
          }
        },
        "security": []
      }
    },
    "/api/inventories/{inventoryId}/move": {
      "post": {
        "summary": "Move item in Inventory",
        "description": "Move an item already in the inventory",
        "operationId": "moveItemInInventory",
        "tags": [
          "inventory"
        ],
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of inventory to move item in",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Position data and quantity to move",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveItemRequest"
              },
              "example": {
                "original_position": {
                  "x": 0,
                  "y": 0,
                  "rotation": 0
                },
                "new_position": {
                  "x": 1,
                  "y": 0,
                  "rotation": 0
                },
                "quantity": 1
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Moved item in inventory"
          },
          "400": {
            "description": "Bad request (e.g. invalid item)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "errorId": "123e4567-e89b-12d3-a456-426614174000",
                  "error": "The item does not exist",
                  "ErrorType": "Not Found",
                  "code": 404,
                  "timestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          },
          "404": {
            "description": "Can not find inventory or item in inventory"
          }
        },
        "security": []
      }
    },
    "/api/inventories/{inventoryId}/add": {
      "post": {
        "summary": "Add item to inventory (with optional position)",
        "description": "Adds a new item to the inventory with an optional position",
        "operationId": "addItemInInventory",
        "tags": [
          "inventory"
        ],
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "ID of inventory to add item to",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Item to add with quantity and optional position",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddItemToInventoryRequest"
              },
              "example": {
                "item": {
                  "id": 1,
                  "variant": "rare",
                  "name": "Sword",
                  "text": "Example of a rare sword.",
                  "buy_value": 100,
                  "sell_value": 50,
                  "weight": 10,
                  "durability": 100,
                  "max_stack": 1,
                  "shape": {
                    "rawshape": "###",
                    "height": 3,
                    "width": 1
                  },
                  "type": "meleeWeapon"
                },
                "quantity": 1,
                "durability_left": 100,
                "position": {
                  "x": 0,
                  "y": 0,
                  "rotation": 0
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Added item to inventory",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryItem"
                },
                "example": {
                  "item": {
                    "id": 1,
                    "variant": "rare",
                    "name": "Sword",
                    "text": "A sword that can be used to fight some enemies.",
                    "buy_value": 100,
                    "sell_value": 50,
                    "weight": 10,
                    "durability": 100,
                    "max_stack": 1,
                    "shape": {
                      "rawshape": "#####..#####",
                      "height": 3,
                      "width": 4
                    },
                    "type": "meleeWeapon"
                  },
                  "position": {
                    "x": 0,
                    "y": 0,
                    "rotation": 2
                  },
                  "quantity": 1,
                  "durability_left": 70
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g. invalid item or invalid position)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "errorId": "123e4567-e89b-12d3-a456-426614174000",
                  "error": "The item does not exist",
                  "ErrorType": "Not Found",
                  "code": 404,
                  "timestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/info/metrics": {
      "get": {
        "tags": [
          "info"
        ],
        "summary": "Get metrics for the service",
        "description": "Retrieve prometheus metrics",
        "operationId": "getMetrics",
        "responses": {
          "200": {
            "description": "Prometheus metrics",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "example": "SOME PROMETHEUS DATA"
              }
            }
          },
          "400": {
            "description": "You somehow managed to mess up the metrics request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "errorId": "123e4567-e89b-12d3-a456-426614174000",
                  "error": "The item does not exist",
                  "ErrorType": "Not Found",
                  "code": 404,
                  "timestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/info/version": {
      "get": {
        "tags": [
          "info"
        ],
        "summary": "Get version info of the service",
        "description": "Retrieve the version info of the service",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "description": "The version of the service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Version"
                },
                "example": {
                  "version": "1.0.0",
                  "buildDate": "2020-01-01",
                  "details": "This is an API.",
                  "commitHash": "0d1444adb917eacc71321f1281904f71c5e378ca",
                  "commitDate": "2020-01-01T00:00:00Z"
                }
              }
            }
          },
          "400": {
            "description": "You somehow managed to mess up the version request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "errorId": "123e4567-e89b-12d3-a456-426614174000",
                  "error": "The item does not exist",
                  "ErrorType": "Not Found",
                  "code": 404,
                  "timestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/info/status": {
      "get": {
        "tags": [
          "info"
        ],
        "summary": "Get status of the service",
        "description": "Retrieve the status of the service",
        "operationId": "getStatus",
        "responses": {
          "200": {
            "description": "The status of the service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                },
                "example": "HEALTHY"
              }
            }
          },
          "400": {
            "description": "You somehow managed to mess up the status request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "errorId": "123e4567-e89b-12d3-a456-426614174000",
                  "error": "The item does not exist",
                  "ErrorType": "Not Found",
                  "code": 404,
                  "timestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/info/openapi.json": {
      "get": {
        "tags": [
          "info"
        ],
        "summary": "Get openapi spec as json",
        "description": "Retrieve the OpenAPI spec as JSON",
        "operationId": "getOpenAPIJSON",
        "responses": {
          "200": {
            "description": "The OpenAPI spec as JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {}
              }
            }
          },
          "400": {
            "description": "You somehow managed to mess up the oapi json request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "errorId": "123e4567-e89b-12d3-a456-426614174000",
                  "error": "The item does not exist",
                  "ErrorType": "Not Found",
                  "code": 404,
                  "timestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/info/openapi.html": {
      "get": {
        "tags": [
          "info"
        ],
        "summary": "Get describing html of openapi spec",
        "description": "Retrieve the OpenAPI spec as HTML",
        "operationId": "getOpenAPIHTML",
        "parameters": [
          {
            "name": "render",
            "in": "query",
            "description": "OpenAPI html renderer",
            "required": false,
            "schema": {
              "type": "string",
              "description": "OpenAPI html renderer name (scalar or spotlight)"
            },
            "example": "scalar"
          }
        ],
        "responses": {
          "200": {
            "description": "The rendered HTML for the OpenAPI spec",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string",
                  "example": "<html>...</html>"
                }
              }
            }
          },
          "400": {
            "description": "You somehow managed to mess up the oapi html request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "errorId": "123e4567-e89b-12d3-a456-426614174000",
                  "error": "The item does not exist",
                  "ErrorType": "Not Found",
                  "code": 404,
                  "timestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          }
        },
        "security": []
      }
    }
  },
  "components": {
    "schemas": {
      "ItemShape": {
        "type": "object",
        "description": "This object holds the item shape data.",
        "properties": {
          "rawshape": {
            "type": "string",
            "example": "#####..#####"
          },
          "height": {
            "type": "integer",
            "format": "int64",
            "example": 3
          },
          "width": {
            "type": "integer",
            "format": "int64",
            "example": 4
          }
        },
        "example": {
          "rawshape": "#####..#####",
          "height": 3,
          "width": 4
        },
        "required": [
          "rawshape",
          "height",
          "width"
        ]
      },
      "ItemType": {
        "type": "string",
        "description": "The type of the item.",
        "example": "meleeWeapon",
        "enum": [
          "consumable",
          "armor",
          "rangedWeapon",
          "meleeWeapon",
          "consumableWeapon",
          "quest",
          "resource"
        ]
      },
      "Item": {
        "type": "object",
        "description": "This object holds the item data.",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "variant": {
            "type": "string",
            "example": "fast"
          },
          "name": {
            "type": "string",
            "example": "Sword"
          },
          "text": {
            "type": "string",
            "example": "A sword that can be used to fight slow enemies."
          },
          "buy_value": {
            "type": "integer",
            "format": "int64",
            "example": 100
          },
          "sell_value": {
            "type": "integer",
            "format": "int64",
            "example": 50
          },
          "weight": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "durability": {
            "type": "integer",
            "format": "int64",
            "example": 100
          },
          "max_stack": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "shape": {
            "$ref": "#/components/schemas/ItemShape"
          },
          "type": {
            "$ref": "#/components/schemas/ItemType"
          }
        },
        "example": {
          "id": 1,
          "variant": "gigantic",
          "name": "Sword",
          "text": "A sword that can be used to fight gigantic enemies.",
          "buy_value": 100,
          "sell_value": 50,
          "weight": 10,
          "durability": 100,
          "max_stack": 1,
          "shape": {
            "rawshape": "###",
            "height": 3,
            "width": 1
          },
          "type": "meleeWeapon"
        },
        "required": [
          "id",
          "variant",
          "name",
          "text",
          "buy_value",
          "sell_value",
          "weight",
          "durability",
          "max_stack",
          "shape",
          "type"
        ]
      },
      "ItemList": {
        "type": "array",
        "description": "The list of items.",
        "items": {
          "$ref": "#/components/schemas/Item"
        },
        "example": [
          {
            "id": 1,
            "variant": "rare",
            "name": "Sword",
            "text": "A sword that can be used to fight enemies.",
            "buy_value": 100,
            "sell_value": 50,
            "weight": 10,
            "durability": 100,
            "max_stack": 1,
            "shape": {
              "rawshape": "###",
              "height": 3,
              "width": 1
            },
            "type": "meleeWeapon"
          },
          {
            "id": 2,
            "variant": "common",
            "name": "Shield",
            "text": "A shield that can be used to block enemy attacks.",
            "buy_value": 50,
            "sell_value": 25,
            "weight": 15,
            "durability": 150,
            "max_stack": 1,
            "shape": {
              "rawshape": "####",
              "height": 2,
              "width": 2
            },
            "type": "meleeWeapon"
          }
        ]
      },
      "Pagination": {
        "type": "object",
        "description": "This object holds the pagination data.",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "pages": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "example": 100
          },
          "offset": {
            "type": "integer",
            "format": "int64",
            "example": 0
          }
        },
        "example": {
          "page": 1,
          "pages": 10,
          "limit": 10,
          "total": 100,
          "offset": 0
        },
        "required": [
          "page",
          "pages",
          "limit",
          "total",
          "offset"
        ]
      },
      "ItemListResponse": {
        "type": "object",
        "description": "This object holds the item list response data. It includes the list of items and pagination data.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/ItemList"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "example": {
          "items": [
            {
              "id": 1,
              "variant": "rare",
              "name": "Sword",
              "text": "A sword that can be used to fight small enemies.",
              "buy_value": 100,
              "sell_value": 50,
              "weight": 10,
              "durability": 100,
              "max_stack": 1,
              "shape": {
                "rawshape": "###",
                "height": 3,
                "width": 1
              },
              "type": "meleeWeapon"
            },
            {
              "id": 2,
              "variant": "common",
              "name": "Shield",
              "text": "A shield that can be used to block enemy attacks.",
              "buy_value": 50,
              "sell_value": 25,
              "weight": 15,
              "durability": 150,
              "max_stack": 1,
              "shape": {
                "rawshape": "####",
                "height": 2,
                "width": 2
              },
              "type": "meleeWeapon"
            }
          ],
          "pagination": {
            "page": 1,
            "pages": 10,
            "limit": 10,
            "total": 100,
            "offset": 0
          }
        },
        "required": [
          "items",
          "pagination"
        ]
      },
      "ItemPostRequest": {
        "type": "object",
        "description": "This object holds the request data for creating a new item.",
        "properties": {
          "name": {
            "type": "string",
            "example": "Sword"
          },
          "variant": {
            "type": "string",
            "example": "Iron"
          },
          "text": {
            "type": "string",
            "example": "A sword made of iron."
          },
          "buy_value": {
            "type": "integer",
            "format": "int64",
            "example": 100
          },
          "sell_value": {
            "type": "integer",
            "format": "int64",
            "example": 50
          },
          "weight": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "durability": {
            "type": "integer",
            "format": "int64",
            "example": 200
          },
          "max_stack": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "type": {
            "$ref": "#/components/schemas/ItemType"
          },
          "shape": {
            "$ref": "#/components/schemas/ItemShape"
          }
        },
        "example": {
          "name": "Sword",
          "variant": "Iron",
          "text": "A sword made of iron.",
          "buy_value": 200,
          "sell_value": 70,
          "weight": 20,
          "durability": 350,
          "max_stack": 1,
          "type": "meleeWeapon",
          "shape": {
            "rawshape": "###",
            "height": 3,
            "width": 1
          }
        },
        "required": [
          "name",
          "variant",
          "text",
          "buy_value",
          "sell_value",
          "weight",
          "durability",
          "max_stack",
          "type",
          "shape"
        ]
      },
      "ErrorType": {
        "type": "string",
        "description": "The error type",
        "enum": [
          "Bad Request",
          "Not Found",
          "Not Implemented",
          "Internal Server Error"
        ],
        "example": "Bad Request"
      },
      "Error": {
        "type": "object",
        "description": "This object holds the error response data.",
        "properties": {
          "errorId": {
            "type": "string",
            "description": "The unique identifier for the error",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "error": {
            "type": "string",
            "description": "The error message",
            "example": "The item does not exist"
          },
          "ErrorType": {
            "$ref": "#/components/schemas/ErrorType"
          },
          "code": {
            "type": "integer",
            "description": "The error code",
            "example": 404
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The time the error occurred",
            "example": "2020-01-01T00:00:00Z"
          }
        },
        "example": {
          "errorId": "123e4567-e89b-12d3-a456-426614174000",
          "error": "The item does not exist",
          "ErrorType": "Not Found",
          "code": 404,
          "timestamp": "2020-01-01T00:00:00Z"
        },
        "required": [
          "errorId",
          "error",
          "ErrorType",
          "code",
          "timestamp"
        ]
      },
      "Volume": {
        "type": "object",
        "description": "This object holds the volume data.",
        "properties": {
          "height": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "width": {
            "type": "integer",
            "format": "int64",
            "example": 10
          }
        },
        "example": {
          "height": 10,
          "width": 10
        },
        "required": [
          "height",
          "width"
        ]
      },
      "InventoryMeta": {
        "type": "object",
        "description": "This object holds the inventory meta data (restrictions, owner, etc.)",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Backpack"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "max_weight": {
            "type": "integer",
            "format": "int64",
            "example": 850
          },
          "volume": {
            "$ref": "#/components/schemas/Volume"
          }
        },
        "example": {
          "id": 1,
          "name": "Backpack",
          "userId": 1,
          "max_weight": 850,
          "volume": {
            "height": 3,
            "width": 4
          }
        },
        "required": [
          "id",
          "name",
          "userId",
          "max_weight",
          "volume"
        ]
      },
      "InventoryMetaList": {
        "type": "array",
        "description": "The list of inventory metas.",
        "items": {
          "$ref": "#/components/schemas/InventoryMeta"
        },
        "example": [
          {
            "id": 1,
            "name": "Backpack",
            "userId": 1,
            "max_weight": 850,
            "volume": {
              "height": 3,
              "width": 4
            }
          },
          {
            "id": 2,
            "name": "Chest",
            "userId": 1,
            "max_weight": 1500,
            "volume": {
              "height": 10,
              "width": 10
            }
          }
        ]
      },
      "User": {
        "type": "object",
        "description": "This object holds the user data.",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "username": {
            "type": "string",
            "example": "JohnDoe"
          },
          "email": {
            "type": "string",
            "example": "something@something.com"
          },
          "inventories": {
            "$ref": "#/components/schemas/InventoryMetaList"
          }
        },
        "example": {
          "id": 1,
          "username": "john_doe",
          "email": "something@something.com",
          "inventories": [
            {
              "id": 1,
              "name": "Backpack",
              "userId": 1,
              "max_weight": 850,
              "volume": {
                "height": 3,
                "width": 4
              }
            },
            {
              "id": 2,
              "name": "Bank",
              "userId": 1,
              "max_weight": 10000,
              "volume": {
                "height": 10,
                "width": 10
              }
            }
          ]
        },
        "required": [
          "id",
          "username",
          "email",
          "inventories"
        ]
      },
      "UserList": {
        "type": "array",
        "description": "The list of users.",
        "items": {
          "$ref": "#/components/schemas/User"
        },
        "example": [
          {
            "id": 1,
            "username": "john_doe",
            "inventories": [
              {
                "id": 1,
                "name": "Backpack",
                "userId": 1,
                "max_weight": 850,
                "volume": {
                  "height": 3,
                  "width": 4
                }
              },
              {
                "id": 2,
                "name": "Bank",
                "userId": 1,
                "max_weight": 10000,
                "volume": {
                  "height": 10,
                  "width": 10
                }
              }
            ]
          },
          {
            "id": 2,
            "username": "jane_doe",
            "inventories": [
              {
                "id": 3,
                "name": "Big Backpack",
                "userId": 2,
                "max_weight": 1350,
                "volume": {
                  "height": 5,
                  "width": 8
                }
              },
              {
                "id": 4,
                "name": "Small Bank",
                "userId": 2,
                "max_weight": 1000,
                "volume": {
                  "height": 7,
                  "width": 7
                }
              }
            ]
          }
        ]
      },
      "UserListResponse": {
        "type": "object",
        "description": "This object holds the user list response data. It includes the list of users and pagination data.",
        "properties": {
          "users": {
            "$ref": "#/components/schemas/UserList"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "example": {
          "users": [
            {
              "id": 1,
              "username": "john_doe",
              "email": "something@something.com",
              "inventories": [
                {
                  "id": 1,
                  "name": "Backpack",
                  "userId": 1,
                  "max_weight": 850,
                  "volume": {
                    "height": 3,
                    "width": 4
                  }
                },
                {
                  "id": 2,
                  "name": "Bank",
                  "userId": 1,
                  "max_weight": 10000,
                  "volume": {
                    "height": 10,
                    "width": 10
                  }
                }
              ]
            },
            {
              "id": 2,
              "username": "jane_doe",
              "email": "different@something.com",
              "inventories": [
                {
                  "id": 3,
                  "name": "Big Backpack",
                  "userId": 2,
                  "max_weight": 1350,
                  "volume": {
                    "height": 5,
                    "width": 8
                  }
                },
                {
                  "id": 4,
                  "name": "Small Bank",
                  "userId": 2,
                  "max_weight": 1000,
                  "volume": {
                    "height": 7,
                    "width": 7
                  }
                }
              ]
            }
          ],
          "pagination": {
            "page": 1,
            "pages": 10,
            "limit": 10,
            "total": 100,
            "offset": 0
          }
        },
        "required": [
          "users",
          "pagination"
        ]
      },
      "UserPostRequest": {
        "type": "object",
        "description": "This object holds the request data for creating a new user.",
        "properties": {
          "username": {
            "type": "string",
            "example": "john_doe"
          },
          "email": {
            "type": "string",
            "example": "john_doe@test.com"
          }
        },
        "example": {
          "username": "john_doe",
          "email": "something@something.com"
        },
        "required": [
          "username",
          "email"
        ]
      },
      "InventoryListResponse": {
        "type": "object",
        "description": "This object holds the inventory list response data. It includes the list of inventories and pagination data.",
        "properties": {
          "inventories": {
            "$ref": "#/components/schemas/InventoryMetaList"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "example": {
          "inventories": [
            {
              "id": 1,
              "name": "Backpack",
              "userId": 1,
              "max_weight": 850,
              "volume": {
                "height": 3,
                "width": 4
              }
            },
            {
              "id": 2,
              "name": "Chest",
              "userId": 1,
              "max_weight": 1500,
              "volume": {
                "height": 10,
                "width": 10
              }
            }
          ],
          "pagination": {
            "page": 1,
            "pages": 10,
            "limit": 10,
            "total": 100,
            "offset": 0
          }
        },
        "required": [
          "inventories",
          "pagination"
        ]
      },
      "InventoryPostRequest": {
        "type": "object",
        "description": "This object holds the request data for creating an inventory.",
        "properties": {
          "name": {
            "type": "string",
            "example": "Backpack"
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "max_weight": {
            "type": "integer",
            "format": "int64",
            "example": 850
          },
          "volume": {
            "$ref": "#/components/schemas/Volume"
          }
        },
        "example": {
          "name": "Backpack",
          "user_id": 1,
          "max_weight": 850,
          "volume": {
            "height": 10,
            "width": 10
          }
        },
        "required": [
          "name",
          "user_id",
          "max_weight",
          "volume"
        ]
      },
      "Position": {
        "type": "object",
        "description": "This object holds the position data.",
        "properties": {
          "x": {
            "type": "integer",
            "format": "int64",
            "example": 3
          },
          "y": {
            "type": "integer",
            "format": "int64",
            "example": 4
          },
          "rotation": {
            "type": "integer",
            "format": "int64",
            "example": 2
          }
        },
        "example": {
          "x": 3,
          "y": 4,
          "rotation": 2
        },
        "required": [
          "x",
          "y",
          "rotation"
        ]
      },
      "InventoryItem": {
        "type": "object",
        "description": "This object holds the inventory item data.",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/Item"
          },
          "position": {
            "$ref": "#/components/schemas/Position"
          },
          "quantity": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "durability_left": {
            "type": "integer",
            "format": "int64",
            "example": 100
          }
        },
        "example": {
          "item": {
            "id": 1,
            "variant": "rare",
            "name": "Sword",
            "text": "A sword that can be used to fight some enemies.",
            "buy_value": 100,
            "sell_value": 50,
            "weight": 10,
            "durability": 100,
            "max_stack": 1,
            "shape": {
              "rawshape": "#####..#####",
              "height": 3,
              "width": 4
            },
            "type": "meleeWeapon"
          },
          "position": {
            "x": 0,
            "y": 0,
            "rotation": 2
          },
          "quantity": 1,
          "durability_left": 70
        },
        "required": [
          "item",
          "position",
          "quantity",
          "durability_left"
        ]
      },
      "InventoryItemList": {
        "type": "array",
        "description": "The list of inventory items.",
        "items": {
          "$ref": "#/components/schemas/InventoryItem"
        },
        "example": [
          {
            "item": {
              "id": 1,
              "variant": "rare",
              "name": "Sword",
              "text": "A sword that can be used to fight tiny enemies.",
              "buy_value": 100,
              "sell_value": 50,
              "weight": 10,
              "durability": 100,
              "max_stack": 1,
              "shape": {
                "rawshape": "###",
                "height": 3,
                "width": 1
              },
              "type": "meleeWeapon"
            },
            "position": {
              "x": 0,
              "y": 0,
              "rotation": 2
            },
            "quantity": 1,
            "durability_left": 70
          },
          {
            "item": {
              "id": 2,
              "variant": "wooden",
              "name": "Shield",
              "text": "A shield that can be used to block attacks.",
              "buy_value": 50,
              "sell_value": 25,
              "weight": 5,
              "durability": 50,
              "max_stack": 1,
              "shape": {
                "rawshape": "####",
                "height": 2,
                "width": 2
              },
              "type": "meleeWeapon"
            },
            "position": {
              "x": 3,
              "y": 0,
              "rotation": 0
            },
            "quantity": 1,
            "durability_left": 30
          }
        ]
      },
      "Inventory": {
        "type": "object",
        "description": "This object holds the inventory meta data and the items in the inventory as an array of InventoryItem objects.",
        "properties": {
          "inventoryMeta": {
            "$ref": "#/components/schemas/InventoryMeta"
          },
          "items": {
            "$ref": "#/components/schemas/InventoryItemList"
          }
        },
        "example": {
          "inventoryMeta": {
            "id": 1,
            "name": "Backpack",
            "userId": 1,
            "max_weight": 850,
            "volume": {
              "height": 3,
              "width": 4
            }
          },
          "items": [
            {
              "item": {
                "id": 1,
                "variant": "rare",
                "name": "Sword",
                "text": "A sword that can be used to fight tiny enemies.",
                "buy_value": 100,
                "sell_value": 50,
                "weight": 10,
                "durability": 100,
                "max_stack": 1,
                "shape": {
                  "rawshape": "###",
                  "height": 3,
                  "width": 1
                },
                "type": "meleeWeapon"
              },
              "position": {
                "x": 0,
                "y": 0,
                "rotation": 0
              },
              "quantity": 1,
              "durability_left": 70
            }
          ]
        },
        "required": [
          "inventoryMeta",
          "items"
        ]
      },
      "MoveItemRequest": {
        "type": "object",
        "description": "This object holds the request data for moving an item within the inventory.",
        "properties": {
          "original_position": {
            "$ref": "#/components/schemas/Position"
          },
          "new_position": {
            "$ref": "#/components/schemas/Position"
          },
          "quantity": {
            "type": "integer",
            "format": "int64",
            "example": 1
          }
        },
        "example": {
          "original_position": {
            "x": 0,
            "y": 0,
            "rotation": 0
          },
          "new_position": {
            "x": 1,
            "y": 0,
            "rotation": 0
          },
          "quantity": 1
        },
        "required": [
          "original_position",
          "new_position",
          "quantity"
        ]
      },
      "AddItemToInventoryRequest": {
        "type": "object",
        "description": "This object holds the request data for adding an item to the inventory.",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/Item"
          },
          "quantity": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "durability_left": {
            "type": "integer",
            "format": "int64",
            "example": 100
          },
          "position": {
            "$ref": "#/components/schemas/Position"
          }
        },
        "example": {
          "item": {
            "id": 1,
            "variant": "rare",
            "name": "Sword",
            "text": "Example of a rare sword.",
            "buy_value": 100,
            "sell_value": 50,
            "weight": 10,
            "durability": 100,
            "max_stack": 1,
            "shape": {
              "rawshape": "###",
              "height": 3,
              "width": 1
            },
            "type": "meleeWeapon"
          },
          "quantity": 1,
          "durability_left": 100,
          "position": {
            "x": 0,
            "y": 0,
            "rotation": 0
          }
        },
        "required": [
          "item",
          "quantity",
          "durability_left"
        ]
      },
      "Version": {
        "type": "object",
        "description": "This object holds the API version data.",
        "properties": {
          "version": {
            "type": "string",
            "description": "The version of the API",
            "example": "1.0.0"
          },
          "buildDate": {
            "type": "string",
            "description": "The date the code was built",
            "example": "2020-01-01"
          },
          "details": {
            "type": "string",
            "description": "A description of the API",
            "example": "This is the API for the x service"
          },
          "commitHash": {
            "type": "string",
            "description": "The hash of the commit",
            "example": "0d1444adb917eacc71321f1281904f71c5e378ca"
          },
          "commitDate": {
            "type": "string",
            "description": "The date of the commit",
            "example": "2020-01-01T00:00:00Z"
          }
        },
        "example": {
          "version": "1.0.0",
          "buildDate": "2020-01-01",
          "details": "This is an API.",
          "commitHash": "0d1444adb917eacc71321f1281904f71c5e378ca",
          "commitDate": "2020-01-01T00:00:00Z"
        },
        "required": [
          "version",
          "buildDate",
          "details",
          "commitHash",
          "commitDate"
        ]
      },
      "Status": {
        "type": "string",
        "description": "The status of the API",
        "enum": [
          "HEALTHY",
          "UNHEALTHY",
          "UNKNOWN"
        ],
        "example": "HEALTHY"
      }
    }
  }
}