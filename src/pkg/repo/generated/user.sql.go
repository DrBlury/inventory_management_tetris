// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
  "user" (username, email, salt, password_hash, created_at)
VALUES
  ($1, $2, $3, $4, $5)
RETURNING
  id, username, salt, password_hash, email, created_at
`

type CreateUserParams struct {
	Username     pgtype.Text
	Email        pgtype.Text
	Salt         pgtype.Text
	PasswordHash pgtype.Text
	CreatedAt    pgtype.Timestamp
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Salt,
		arg.PasswordHash,
		arg.CreatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Salt,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM "user"
WHERE
  id = $1
RETURNING
  id, username, salt, password_hash, email, created_at
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Salt,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT
  id, username, salt, password_hash, email, created_at
FROM
  "user"
WHERE
  id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Salt,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT
  id, username, salt, password_hash, email, created_at
FROM
  "user"
WHERE
  username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Salt,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT
  id, username, salt, password_hash, email, created_at
FROM
  "user"
ORDER BY
  id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Salt,
			&i.PasswordHash,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user"
SET
  username = $1,
  email = $2,
  salt = $3,
  password_hash = $4,
  created_at = $5
WHERE
  id = $6
RETURNING
  id, username, salt, password_hash, email, created_at
`

type UpdateUserParams struct {
	Username     pgtype.Text
	Email        pgtype.Text
	Salt         pgtype.Text
	PasswordHash pgtype.Text
	CreatedAt    pgtype.Timestamp
	ID           int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.Salt,
		arg.PasswordHash,
		arg.CreatedAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Salt,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
