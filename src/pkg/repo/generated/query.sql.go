// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addItemToInventory = `-- name: AddItemToInventory :one
INSERT INTO
  inventory_item (
    inventory_id,
    item_id,
    position_x,
    position_y,
    rotation,
    quantity,
    created_at
  )
VALUES
  ($1, $2, $3, $4, $5, $6, $7)
RETURNING
  id, inventory_id, item_id, quantity, position_x, position_y, rotation, "durabilityLeft", created_at
`

type AddItemToInventoryParams struct {
	InventoryID pgtype.Int4
	ItemID      pgtype.Int4
	PositionX   pgtype.Int4
	PositionY   pgtype.Int4
	Rotation    pgtype.Int4
	Quantity    pgtype.Int4
	CreatedAt   pgtype.Timestamp
}

func (q *Queries) AddItemToInventory(ctx context.Context, arg AddItemToInventoryParams) (InventoryItem, error) {
	row := q.db.QueryRow(ctx, addItemToInventory,
		arg.InventoryID,
		arg.ItemID,
		arg.PositionX,
		arg.PositionY,
		arg.Rotation,
		arg.Quantity,
		arg.CreatedAt,
	)
	var i InventoryItem
	err := row.Scan(
		&i.ID,
		&i.InventoryID,
		&i.ItemID,
		&i.Quantity,
		&i.PositionX,
		&i.PositionY,
		&i.Rotation,
		&i.DurabilityLeft,
		&i.CreatedAt,
	)
	return i, err
}

const createInventory = `-- name: CreateInventory :one
INSERT INTO
  inventory (
    user_id,
    invname,
    width,
    height,
    max_weight,
    created_at
  )
VALUES
  ($1, $2, $3, $4, $5, $6)
RETURNING
  id, invname, user_id, width, height, max_weight, created_at
`

type CreateInventoryParams struct {
	UserID    pgtype.Int4
	Invname   pgtype.Text
	Width     pgtype.Int4
	Height    pgtype.Int4
	MaxWeight pgtype.Int4
	CreatedAt pgtype.Timestamp
}

func (q *Queries) CreateInventory(ctx context.Context, arg CreateInventoryParams) (Inventory, error) {
	row := q.db.QueryRow(ctx, createInventory,
		arg.UserID,
		arg.Invname,
		arg.Width,
		arg.Height,
		arg.MaxWeight,
		arg.CreatedAt,
	)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.Invname,
		&i.UserID,
		&i.Width,
		&i.Height,
		&i.MaxWeight,
		&i.CreatedAt,
	)
	return i, err
}

const createItem = `-- name: CreateItem :one
INSERT INTO
  item (
    name,
    description,
    variant,
    buy_value,
    sell_value,
    weight,
    durability,
    max_stack,
    height,
    width,
    rawshape,
    type,
    created_at
  )
VALUES
  (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13
  )
RETURNING
  id, name, description, variant, buy_value, sell_value, weight, durability, max_stack, height, width, rawshape, created_at, type
`

type CreateItemParams struct {
	Name        pgtype.Text
	Description pgtype.Text
	Variant     pgtype.Text
	BuyValue    pgtype.Int4
	SellValue   pgtype.Int4
	Weight      pgtype.Int4
	Durability  pgtype.Int4
	MaxStack    pgtype.Int4
	Height      pgtype.Int4
	Width       pgtype.Int4
	Rawshape    pgtype.Text
	Type        NullItemType
	CreatedAt   pgtype.Timestamp
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRow(ctx, createItem,
		arg.Name,
		arg.Description,
		arg.Variant,
		arg.BuyValue,
		arg.SellValue,
		arg.Weight,
		arg.Durability,
		arg.MaxStack,
		arg.Height,
		arg.Width,
		arg.Rawshape,
		arg.Type,
		arg.CreatedAt,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Variant,
		&i.BuyValue,
		&i.SellValue,
		&i.Weight,
		&i.Durability,
		&i.MaxStack,
		&i.Height,
		&i.Width,
		&i.Rawshape,
		&i.CreatedAt,
		&i.Type,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO
  "user" (username, email, salt, password_hash, created_at)
VALUES
  ($1, $2, $3, $4, $5)
RETURNING
  id, username, salt, password_hash, email, created_at
`

type CreateUserParams struct {
	Username     pgtype.Text
	Email        pgtype.Text
	Salt         pgtype.Text
	PasswordHash pgtype.Text
	CreatedAt    pgtype.Timestamp
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Salt,
		arg.PasswordHash,
		arg.CreatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Salt,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const deleteInventory = `-- name: DeleteInventory :one
DELETE FROM inventory
WHERE
  id = $1
RETURNING
  id, invname, user_id, width, height, max_weight, created_at
`

func (q *Queries) DeleteInventory(ctx context.Context, id int32) (Inventory, error) {
	row := q.db.QueryRow(ctx, deleteInventory, id)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.Invname,
		&i.UserID,
		&i.Width,
		&i.Height,
		&i.MaxWeight,
		&i.CreatedAt,
	)
	return i, err
}

const deleteItem = `-- name: DeleteItem :one
DELETE FROM item
WHERE
  id = $1
RETURNING
  id, name, description, variant, buy_value, sell_value, weight, durability, max_stack, height, width, rawshape, created_at, type
`

func (q *Queries) DeleteItem(ctx context.Context, id int32) (Item, error) {
	row := q.db.QueryRow(ctx, deleteItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Variant,
		&i.BuyValue,
		&i.SellValue,
		&i.Weight,
		&i.Durability,
		&i.MaxStack,
		&i.Height,
		&i.Width,
		&i.Rawshape,
		&i.CreatedAt,
		&i.Type,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM "user"
WHERE
  id = $1
RETURNING
  id, username, salt, password_hash, email, created_at
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Salt,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getInventory = `-- name: GetInventory :one
SELECT
  id, invname, user_id, width, height, max_weight, created_at
FROM
  inventory
WHERE
  id = $1
`

func (q *Queries) GetInventory(ctx context.Context, id int32) (Inventory, error) {
	row := q.db.QueryRow(ctx, getInventory, id)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.Invname,
		&i.UserID,
		&i.Width,
		&i.Height,
		&i.MaxWeight,
		&i.CreatedAt,
	)
	return i, err
}

const getItem = `-- name: GetItem :one
SELECT
  id, name, description, variant, buy_value, sell_value, weight, durability, max_stack, height, width, rawshape, created_at, type
FROM
  item
WHERE
  id = $1
`

func (q *Queries) GetItem(ctx context.Context, id int32) (Item, error) {
	row := q.db.QueryRow(ctx, getItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Variant,
		&i.BuyValue,
		&i.SellValue,
		&i.Weight,
		&i.Durability,
		&i.MaxStack,
		&i.Height,
		&i.Width,
		&i.Rawshape,
		&i.CreatedAt,
		&i.Type,
	)
	return i, err
}

const getItemByType = `-- name: GetItemByType :many
SELECT
  id, name, description, variant, buy_value, sell_value, weight, durability, max_stack, height, width, rawshape, created_at, type
FROM
  item
WHERE
  type = $1
ORDER BY
  id
`

func (q *Queries) GetItemByType(ctx context.Context, type_ NullItemType) ([]Item, error) {
	rows, err := q.db.Query(ctx, getItemByType, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Variant,
			&i.BuyValue,
			&i.SellValue,
			&i.Weight,
			&i.Durability,
			&i.MaxStack,
			&i.Height,
			&i.Width,
			&i.Rawshape,
			&i.CreatedAt,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT
  id, username, salt, password_hash, email, created_at
FROM
  "user"
WHERE
  id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Salt,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT
  id, username, salt, password_hash, email, created_at
FROM
  "user"
WHERE
  username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Salt,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const listInventories = `-- name: ListInventories :many
SELECT
  id, invname, user_id, width, height, max_weight, created_at
FROM
  inventory
ORDER BY
  id
`

func (q *Queries) ListInventories(ctx context.Context) ([]Inventory, error) {
	rows, err := q.db.Query(ctx, listInventories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Inventory
	for rows.Next() {
		var i Inventory
		if err := rows.Scan(
			&i.ID,
			&i.Invname,
			&i.UserID,
			&i.Width,
			&i.Height,
			&i.MaxWeight,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInventoryItems = `-- name: ListInventoryItems :many
SELECT
  id, inventory_id, item_id, quantity, position_x, position_y, rotation, "durabilityLeft", created_at
FROM
  inventory_item
WHERE
  inventory_id = $1
ORDER BY
  id
`

func (q *Queries) ListInventoryItems(ctx context.Context, inventoryID pgtype.Int4) ([]InventoryItem, error) {
	rows, err := q.db.Query(ctx, listInventoryItems, inventoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InventoryItem
	for rows.Next() {
		var i InventoryItem
		if err := rows.Scan(
			&i.ID,
			&i.InventoryID,
			&i.ItemID,
			&i.Quantity,
			&i.PositionX,
			&i.PositionY,
			&i.Rotation,
			&i.DurabilityLeft,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItems = `-- name: ListItems :many
SELECT
  id, name, description, variant, buy_value, sell_value, weight, durability, max_stack, height, width, rawshape, created_at, type
FROM
  item
ORDER BY
  id
`

func (q *Queries) ListItems(ctx context.Context) ([]Item, error) {
	rows, err := q.db.Query(ctx, listItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Variant,
			&i.BuyValue,
			&i.SellValue,
			&i.Weight,
			&i.Durability,
			&i.MaxStack,
			&i.Height,
			&i.Width,
			&i.Rawshape,
			&i.CreatedAt,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT
  id, username, salt, password_hash, email, created_at
FROM
  "user"
ORDER BY
  id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Salt,
			&i.PasswordHash,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeItemFromInventory = `-- name: RemoveItemFromInventory :one
DELETE FROM inventory_item
WHERE
  id = $1
RETURNING
  id, inventory_id, item_id, quantity, position_x, position_y, rotation, "durabilityLeft", created_at
`

func (q *Queries) RemoveItemFromInventory(ctx context.Context, id int32) (InventoryItem, error) {
	row := q.db.QueryRow(ctx, removeItemFromInventory, id)
	var i InventoryItem
	err := row.Scan(
		&i.ID,
		&i.InventoryID,
		&i.ItemID,
		&i.Quantity,
		&i.PositionX,
		&i.PositionY,
		&i.Rotation,
		&i.DurabilityLeft,
		&i.CreatedAt,
	)
	return i, err
}

const updateInventory = `-- name: UpdateInventory :one
UPDATE inventory
SET
  user_id = $1,
  invname = $2,
  width = $3,
  height = $4,
  created_at = $5
WHERE
  id = $5
RETURNING
  id, invname, user_id, width, height, max_weight, created_at
`

type UpdateInventoryParams struct {
	UserID    pgtype.Int4
	Invname   pgtype.Text
	Width     pgtype.Int4
	Height    pgtype.Int4
	CreatedAt pgtype.Timestamp
}

func (q *Queries) UpdateInventory(ctx context.Context, arg UpdateInventoryParams) (Inventory, error) {
	row := q.db.QueryRow(ctx, updateInventory,
		arg.UserID,
		arg.Invname,
		arg.Width,
		arg.Height,
		arg.CreatedAt,
	)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.Invname,
		&i.UserID,
		&i.Width,
		&i.Height,
		&i.MaxWeight,
		&i.CreatedAt,
	)
	return i, err
}

const updateInventoryItem = `-- name: UpdateInventoryItem :one
UPDATE inventory_item
SET
  inventory_id = $1,
  item_id = $2,
  position_x = $3,
  position_y = $4,
  rotation = $5,
  quantity = $6,
  created_at = $7
WHERE
  id = $8
RETURNING
  id, inventory_id, item_id, quantity, position_x, position_y, rotation, "durabilityLeft", created_at
`

type UpdateInventoryItemParams struct {
	InventoryID pgtype.Int4
	ItemID      pgtype.Int4
	PositionX   pgtype.Int4
	PositionY   pgtype.Int4
	Rotation    pgtype.Int4
	Quantity    pgtype.Int4
	CreatedAt   pgtype.Timestamp
	ID          int32
}

func (q *Queries) UpdateInventoryItem(ctx context.Context, arg UpdateInventoryItemParams) (InventoryItem, error) {
	row := q.db.QueryRow(ctx, updateInventoryItem,
		arg.InventoryID,
		arg.ItemID,
		arg.PositionX,
		arg.PositionY,
		arg.Rotation,
		arg.Quantity,
		arg.CreatedAt,
		arg.ID,
	)
	var i InventoryItem
	err := row.Scan(
		&i.ID,
		&i.InventoryID,
		&i.ItemID,
		&i.Quantity,
		&i.PositionX,
		&i.PositionY,
		&i.Rotation,
		&i.DurabilityLeft,
		&i.CreatedAt,
	)
	return i, err
}

const updateItem = `-- name: UpdateItem :one
UPDATE "item"
SET
  name = $1,
  description = $2,
  variant = $3,
  buy_value = $4,
  sell_value = $5,
  weight = $6,
  durability = $7,
  max_stack = $8,
  height = $9,
  width = $10,
  rawshape = $11,
  type = $12,
  created_at = $13
WHERE
  id = $14
RETURNING
  id, name, description, variant, buy_value, sell_value, weight, durability, max_stack, height, width, rawshape, created_at, type
`

type UpdateItemParams struct {
	Name        pgtype.Text
	Description pgtype.Text
	Variant     pgtype.Text
	BuyValue    pgtype.Int4
	SellValue   pgtype.Int4
	Weight      pgtype.Int4
	Durability  pgtype.Int4
	MaxStack    pgtype.Int4
	Height      pgtype.Int4
	Width       pgtype.Int4
	Rawshape    pgtype.Text
	Type        NullItemType
	CreatedAt   pgtype.Timestamp
	ID          int32
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (Item, error) {
	row := q.db.QueryRow(ctx, updateItem,
		arg.Name,
		arg.Description,
		arg.Variant,
		arg.BuyValue,
		arg.SellValue,
		arg.Weight,
		arg.Durability,
		arg.MaxStack,
		arg.Height,
		arg.Width,
		arg.Rawshape,
		arg.Type,
		arg.CreatedAt,
		arg.ID,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Variant,
		&i.BuyValue,
		&i.SellValue,
		&i.Weight,
		&i.Durability,
		&i.MaxStack,
		&i.Height,
		&i.Width,
		&i.Rawshape,
		&i.CreatedAt,
		&i.Type,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user"
SET
  username = $1,
  email = $2,
  salt = $3,
  password_hash = $4,
  created_at = $5
WHERE
  id = $6
RETURNING
  id, username, salt, password_hash, email, created_at
`

type UpdateUserParams struct {
	Username     pgtype.Text
	Email        pgtype.Text
	Salt         pgtype.Text
	PasswordHash pgtype.Text
	CreatedAt    pgtype.Timestamp
	ID           int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.Salt,
		arg.PasswordHash,
		arg.CreatedAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Salt,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
