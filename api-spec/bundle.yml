openapi: 3.0.0
info:
  title: Inventory Manager
  description: Inventory Manager API
  version: 1.0.0
  license:
    name: unlicensed
    url: www.linuxcode.net
servers:
  - url: inventory.linuxcode.net
    description: Inventory server for example
tags:
  - name: inventory
    description: Inventory operations
  - name: info
    description: Information operations
  - name: item
    description: Item operations
  - name: user
    description: User operations
paths:
  /api/items:
    get:
      summary: Get all items
      operationId: getAllItems
      tags:
        - item
      responses:
        '200':
          description: successful operation - returns a list of items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemListResponse'
        '404':
          description: No items found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security: []
    post:
      summary: Add new item
      operationId: addItem
      tags:
        - item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemPostRequest'
      responses:
        '201':
          description: Added item - returns the newly created item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Bad request - e.g. invalid item
      security: []
  /api/items/{itemId}:
    get:
      summary: Get item by ID
      operationId: getItemById
      tags:
        - item
      parameters:
        - name: itemId
          in: path
          description: ID of item
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation - returns item
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Item'
        '400':
          description: Invalid ID supplied (e.g. not an integer)
        '404':
          description: Can not find item (item ID)
      security: []
    put:
      summary: Update an item
      operationId: updateItemById
      tags:
        - item
      parameters:
        - name: itemId
          in: path
          description: ID of item that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemPostRequest'
      responses:
        '200':
          description: Update done
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Can not find item (item ID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security: []
    delete:
      summary: Delete item by ID
      operationId: deleteItemById
      tags:
        - item
      parameters:
        - name: itemId
          in: path
          description: ID of item to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Deleted item (item ID)
        '400':
          description: Invalid ID supplied (e.g. not an integer)
        '404':
          description: Can not find item (item ID)
      security: []
  /api/users:
    get:
      summary: Get all users
      operationId: getAllUsers
      tags:
        - user
      responses:
        '200':
          description: successful operation - returns a list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '404':
          description: No users found - no users in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security: []
    post:
      summary: Add new user
      operationId: addUser
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPostRequest'
      responses:
        '201':
          description: Added user - returns the newly created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - e.g. invalid user
      security: []
  /api/users/{userId}:
    get:
      summary: Get user by ID
      operationId: getUserById
      tags:
        - user
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Can not find user (user ID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security: []
    put:
      summary: Update an user
      operationId: updateUserById
      tags:
        - user
      parameters:
        - name: userId
          in: path
          description: ID of user that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPostRequest'
      responses:
        '200':
          description: Update done - returns updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: Can not find user (user ID)
      security: []
    delete:
      summary: Delete user by ID
      operationId: deleteUserById
      tags:
        - user
      parameters:
        - name: userId
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Deleted user (user ID)
        '400':
          description: Invalid ID supplied
        '404':
          description: Can not find user (user ID)
      security: []
  /api/inventories:
    get:
      summary: Get all inventories
      operationId: getAllInventories
      tags:
        - inventory
      responses:
        '200':
          description: successful operation - returns a list of inventories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryListResponse'
        '404':
          description: No inventories found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security: []
    post:
      summary: Add new inventory
      operationId: addInventory
      tags:
        - inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryPostRequest'
      responses:
        '201':
          description: Added inventory - returns the newly created inventory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
        '400':
          description: Bad request - e.g. invalid inventory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security: []
  /api/inventories/{inventoryId}:
    get:
      summary: Get inventory by ID
      operationId: getInventoryById
      tags:
        - inventory
      parameters:
        - name: inventoryId
          in: path
          description: ID of inventory
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation - returns inventory
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Inventory'
        '400':
          description: Invalid ID supplied (e.g. not an integer)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Can not find inventory (inventory ID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security: []
    put:
      summary: Update an inventory
      operationId: updateInventoryById
      tags:
        - inventory
      parameters:
        - name: inventoryId
          in: path
          description: ID of inventory that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryPostRequest'
      responses:
        '200':
          description: Update done - returns updated inventory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
        '400':
          description: Invalid ID supplied (e.g. not an integer)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Can not find inventory (inventory ID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete inventory by ID
      operationId: deleteInventoryById
      tags:
        - inventory
      parameters:
        - name: inventoryId
          in: path
          description: ID of inventory to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Deleted inventory (inventory ID)
        '400':
          description: Invalid ID supplied (e.g. not an integer)
        '404':
          description: Can not find inventory (inventory ID)
      security: []
  /api/inventories/{inventoryId}/move:
    post:
      summary: Move an item already in the inventory
      operationId: moveItemInInventory
      tags:
        - inventory
      parameters:
        - name: inventoryId
          in: path
          description: ID of inventory
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveItemRequest'
      responses:
        '200':
          description: Moved item in inventory
        '400':
          description: Bad request (e.g. invalid item)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security: []
  /api/inventories/{inventoryId}/add:
    post:
      summary: Add a new item to the inventory at the first possible position
      operationId: addItemInInventory
      tags:
        - inventory
      parameters:
        - name: inventoryId
          in: path
          description: ID of inventory
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddItemToInventoryRequest'
      responses:
        '200':
          description: Added item to inventory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
        '400':
          description: Bad request (e.g. invalid item)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security: []
  /info/metrics:
    get:
      tags:
        - info
      summary: Get metrics
      description: Get metrics
      operationId: getMetrics
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: Metrics for prometheus
                properties:
                  metrics:
                    type: object
                    description: Metrics for prometheus
  /info/version:
    get:
      tags:
        - info
      summary: Get version
      description: Get version
      operationId: getVersion
      responses:
        '200':
          description: The version of the service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
  /info/status:
    get:
      tags:
        - info
      summary: Get status
      description: Get status
      operationId: getStatus
      responses:
        '200':
          description: The status of the service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /info/openapi.json:
    get:
      tags:
        - info
      summary: Get openapi spec as json
      description: Get openapi spec as json
      operationId: getOpenAPIJSON
      responses:
        '200':
          description: The OpenAPI spec as JSON
          content:
            application/json:
              schema:
                type: object
  /info/openapi.html:
    get:
      tags:
        - info
      parameters:
        - name: render
          in: query
          description: OpenAPI html renderer
          required: false
          schema:
            type: string
            description: OpenAPI html renderer name (scalar or spotlight)
            example: scalar
      summary: Get describing html of openapi spec
      description: Get describing html of openapi spec
      operationId: getOpenAPIHTML
      responses:
        '200':
          description: The rendered HTML for the OpenAPI spec
          content:
            text/html:
              schema:
                type: string
                example: <html>...</html>
components:
  schemas:
    ItemShape:
      type: object
      description: This object holds the item shape data.
      properties:
        rawshape:
          type: string
          example: '#####..#####'
        height:
          type: integer
          example: 3
        width:
          type: integer
          example: 4
      required:
        - rawshape
        - height
        - width
    ItemType:
      type: string
      description: The type of the item.
      example: meleeWeapon
      enum:
        - consumable
        - armor
        - rangedWeapon
        - meleeWeapon
        - consumableWeapon
        - quest
        - resource
    Item:
      type: object
      description: This object holds the item data.
      properties:
        id:
          type: integer
          example: 1
        variant:
          type: string
          example: rare
        name:
          type: string
          example: Sword
        description:
          type: string
          example: A sword that can be used to fight enemies.
        buy_value:
          type: integer
          example: 100
        sell_value:
          type: integer
          example: 50
        weight:
          type: integer
          example: 10
        durability:
          type: integer
          example: 100
        max_stack:
          type: integer
          example: 1
        shape:
          $ref: '#/components/schemas/ItemShape'
        type:
          $ref: '#/components/schemas/ItemType'
      required:
        - id
        - variant
        - name
        - description
        - buy_value
        - sell_value
        - weight
        - durability
        - max_stack
        - shape
        - type
    Pagination:
      type: object
      description: This object holds the pagination data.
      properties:
        page:
          type: integer
          example: 1
        pages:
          type: integer
          example: 10
        limit:
          type: integer
          example: 10
        total:
          type: integer
          example: 100
        offset:
          type: integer
          example: 0
      required:
        - page
        - pages
        - limit
        - total
        - offset
    ItemListResponse:
      type: object
      description: This object holds the item list response data. It includes the list of items and pagination data.
      properties:
        items:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/Item'
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - items
        - pagination
    ErrorType:
      type: string
      example: Bad Request
      description: The error type
      enum:
        - Bad Request
        - Not Found
        - Not Implemented
        - Internal Server Error
    Error:
      type: object
      description: This object holds the error response data.
      properties:
        errorId:
          type: string
          description: The unique identifier for the error
          example: 123e4567-e89b-12d3-a456-426614174000
        error:
          type: string
          description: The error message
          example: The item does not exist
        ErrorType:
          $ref: '#/components/schemas/ErrorType'
        code:
          type: integer
          description: The error code
          example: 404
        timestamp:
          type: string
          format: date-time
          description: The time the error occurred
          example: '2020-01-01T00:00:00Z'
      required:
        - errorId
        - error
        - ErrorType
        - code
        - timestamp
    ItemPostRequest:
      type: object
      description: This object holds the request data for creating a new item.
      properties:
        name:
          type: string
          example: Sword
        variant:
          type: string
          example: Iron
        description:
          type: string
          example: A sword made of iron.
        buy_value:
          type: integer
          example: 100
        sell_value:
          type: integer
          example: 50
        weight:
          type: integer
          example: 10
        durability:
          type: integer
          example: 200
        max_stack:
          type: integer
          example: 1
        type:
          $ref: '#/components/schemas/ItemType'
        shape:
          $ref: '#/components/schemas/ItemShape'
      required:
        - name
        - variant
        - description
        - buy_value
        - sell_value
        - weight
        - durability
        - max_stack
        - type
        - shape
    Volume:
      type: object
      description: This object holds the volume data.
      properties:
        height:
          type: integer
          example: 10
        width:
          type: integer
          example: 10
      required:
        - height
        - width
    InventoryMeta:
      type: object
      description: This object holds the inventory meta data (restrictions, owner, etc.)
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Backpack
        userId:
          type: integer
          example: 1
        max_weight:
          type: integer
          example: 850
        volume:
          $ref: '#/components/schemas/Volume'
      required:
        - id
        - name
        - userId
        - max_weight
        - volume
    User:
      type: object
      description: This object holds the user data.
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: JohnDoe
        inventories:
          type: array
          items:
            $ref: '#/components/schemas/InventoryMeta'
      required:
        - id
        - username
        - inventories
    UserListResponse:
      type: object
      description: This object holds the user list response data. It includes the list of users and pagination data.
      properties:
        users:
          type: array
          description: The list of users.
          items:
            $ref: '#/components/schemas/User'
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - users
        - pagination
    UserPostRequest:
      type: object
      description: This object holds the request data for creating a new user.
      properties:
        username:
          type: string
          example: john_doe
        email:
          type: string
          example: john_doe@test.com
        password:
          type: string
          example: password
      required:
        - username
        - email
        - password
    Position:
      type: object
      description: This object holds the position data.
      properties:
        x:
          type: integer
          example: 3
        'y':
          type: integer
          example: 4
        rotation:
          type: integer
          example: 2
      required:
        - x
        - 'y'
        - rotation
    InventoryItem:
      type: object
      description: This object holds the inventory item data.
      properties:
        item:
          $ref: '#/components/schemas/Item'
        position:
          $ref: '#/components/schemas/Position'
        quantity:
          type: integer
          example: 1
        durability_left:
          type: integer
          example: 100
      required:
        - item
        - position
        - quantity
        - durability_left
    Inventory:
      type: object
      description: This object holds the inventory meta data and the items in the inventory as an array of InventoryItem objects.
      properties:
        inventoryMeta:
          $ref: '#/components/schemas/InventoryMeta'
        items:
          type: array
          description: An array of InventoryItem objects.
          items:
            $ref: '#/components/schemas/InventoryItem'
      required:
        - inventoryMeta
        - items
    InventoryListResponse:
      type: object
      description: This object holds the inventory list response data. It includes the list of inventories and pagination data.
      properties:
        inventories:
          type: array
          description: The list of inventories.
          items:
            $ref: '#/components/schemas/Inventory'
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - inventories
        - pagination
    InventoryPostRequest:
      type: object
      description: This object holds the request data for creating an inventory.
      properties:
        name:
          type: string
          example: Backpack
        user_id:
          type: integer
          example: 1
        max_weight:
          type: integer
          example: 850
        volume:
          $ref: '#/components/schemas/Volume'
      required:
        - name
        - user_id
        - max_weight
        - volume
    MoveItemRequest:
      type: object
      description: This object holds the request data for moving an item within the inventory.
      properties:
        original_position:
          $ref: '#/components/schemas/Position'
        new_position:
          $ref: '#/components/schemas/Position'
        quantity:
          type: integer
          example: 1
      required:
        - original_position
        - new_position
        - quantity
    AddItemToInventoryRequest:
      type: object
      description: This object holds the request data for adding an item to the inventory.
      properties:
        item:
          $ref: '#/components/schemas/Item'
        quantity:
          type: integer
          example: 1
        durability_left:
          type: integer
          example: 100
        position:
          $ref: '#/components/schemas/Position'
      required:
        - item
        - quantity
        - durability_left
    Version:
      type: object
      description: This object holds the API version data.
      properties:
        version:
          type: string
          description: The version of the API
          example: 1.0.0
        buildDate:
          type: string
          description: The date the code was built
          example: '2020-01-01'
        description:
          type: string
          description: A description of the API
          example: This is the API for the inventory management system
        commitHash:
          type: string
          description: The hash of the commit
          example: 1234567890
        commitDate:
          type: string
          description: The date of the commit
          example: '2020-01-01T00:00:00Z'
      required:
        - version
        - buildDate
        - description
        - commitHash
        - commitDate
    Status:
      type: string
      description: The status of the API
      example: HEALTHY
      enum:
        - HEALTHY
        - UNHEALTHY
        - UNKNOWN
